                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.8.2 #5199 (Jul 29 2008) (MINGW32)
                              4 ; This file was generated Mon Aug 19 00:21:25 2019
                              5 ;--------------------------------------------------------
                              6 	.module SERIAL
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _receivedChar
                             13 	.globl _transNumber
                             14 	.globl _CY
                             15 	.globl _AC
                             16 	.globl _F0
                             17 	.globl _RS1
                             18 	.globl _RS0
                             19 	.globl _OV
                             20 	.globl _F1
                             21 	.globl _P
                             22 	.globl _PS
                             23 	.globl _PT1
                             24 	.globl _PX1
                             25 	.globl _PT0
                             26 	.globl _PX0
                             27 	.globl _RD
                             28 	.globl _WR
                             29 	.globl _T1
                             30 	.globl _T0
                             31 	.globl _INT1
                             32 	.globl _INT0
                             33 	.globl _TXD
                             34 	.globl _RXD
                             35 	.globl _P3_7
                             36 	.globl _P3_6
                             37 	.globl _P3_5
                             38 	.globl _P3_4
                             39 	.globl _P3_3
                             40 	.globl _P3_2
                             41 	.globl _P3_1
                             42 	.globl _P3_0
                             43 	.globl _EA
                             44 	.globl _ES
                             45 	.globl _ET1
                             46 	.globl _EX1
                             47 	.globl _ET0
                             48 	.globl _EX0
                             49 	.globl _P2_7
                             50 	.globl _P2_6
                             51 	.globl _P2_5
                             52 	.globl _P2_4
                             53 	.globl _P2_3
                             54 	.globl _P2_2
                             55 	.globl _P2_1
                             56 	.globl _P2_0
                             57 	.globl _SM0
                             58 	.globl _SM1
                             59 	.globl _SM2
                             60 	.globl _REN
                             61 	.globl _TB8
                             62 	.globl _RB8
                             63 	.globl _TI
                             64 	.globl _RI
                             65 	.globl _P1_7
                             66 	.globl _P1_6
                             67 	.globl _P1_5
                             68 	.globl _P1_4
                             69 	.globl _P1_3
                             70 	.globl _P1_2
                             71 	.globl _P1_1
                             72 	.globl _P1_0
                             73 	.globl _TF1
                             74 	.globl _TR1
                             75 	.globl _TF0
                             76 	.globl _TR0
                             77 	.globl _IE1
                             78 	.globl _IT1
                             79 	.globl _IE0
                             80 	.globl _IT0
                             81 	.globl _P0_7
                             82 	.globl _P0_6
                             83 	.globl _P0_5
                             84 	.globl _P0_4
                             85 	.globl _P0_3
                             86 	.globl _P0_2
                             87 	.globl _P0_1
                             88 	.globl _P0_0
                             89 	.globl _B
                             90 	.globl _ACC
                             91 	.globl _PSW
                             92 	.globl _IP
                             93 	.globl _P3
                             94 	.globl _IE
                             95 	.globl _P2
                             96 	.globl _SBUF
                             97 	.globl _SCON
                             98 	.globl _P1
                             99 	.globl _TH1
                            100 	.globl _TH0
                            101 	.globl _TL1
                            102 	.globl _TL0
                            103 	.globl _TMOD
                            104 	.globl _TCON
                            105 	.globl _PCON
                            106 	.globl _DPH
                            107 	.globl _DPL
                            108 	.globl _SP
                            109 	.globl _P0
                            110 	.globl _serialControl_PARM_2
                            111 	.globl _serialConfig_PARM_2
                            112 	.globl _player
                            113 	.globl _Timer0
                            114 	.globl _map
                            115 	.globl _SCmap
                            116 	.globl _transmitter
                            117 	.globl _receiver
                            118 	.globl _serialConfig
                            119 	.globl _serialBegin
                            120 	.globl _serialControl
                            121 ;--------------------------------------------------------
                            122 ; special function registers
                            123 ;--------------------------------------------------------
                            124 	.area RSEG    (DATA)
                    0080    125 _P0	=	0x0080
                    0081    126 _SP	=	0x0081
                    0082    127 _DPL	=	0x0082
                    0083    128 _DPH	=	0x0083
                    0087    129 _PCON	=	0x0087
                    0088    130 _TCON	=	0x0088
                    0089    131 _TMOD	=	0x0089
                    008A    132 _TL0	=	0x008a
                    008B    133 _TL1	=	0x008b
                    008C    134 _TH0	=	0x008c
                    008D    135 _TH1	=	0x008d
                    0090    136 _P1	=	0x0090
                    0098    137 _SCON	=	0x0098
                    0099    138 _SBUF	=	0x0099
                    00A0    139 _P2	=	0x00a0
                    00A8    140 _IE	=	0x00a8
                    00B0    141 _P3	=	0x00b0
                    00B8    142 _IP	=	0x00b8
                    00D0    143 _PSW	=	0x00d0
                    00E0    144 _ACC	=	0x00e0
                    00F0    145 _B	=	0x00f0
                            146 ;--------------------------------------------------------
                            147 ; special function bits
                            148 ;--------------------------------------------------------
                            149 	.area RSEG    (DATA)
                    0080    150 _P0_0	=	0x0080
                    0081    151 _P0_1	=	0x0081
                    0082    152 _P0_2	=	0x0082
                    0083    153 _P0_3	=	0x0083
                    0084    154 _P0_4	=	0x0084
                    0085    155 _P0_5	=	0x0085
                    0086    156 _P0_6	=	0x0086
                    0087    157 _P0_7	=	0x0087
                    0088    158 _IT0	=	0x0088
                    0089    159 _IE0	=	0x0089
                    008A    160 _IT1	=	0x008a
                    008B    161 _IE1	=	0x008b
                    008C    162 _TR0	=	0x008c
                    008D    163 _TF0	=	0x008d
                    008E    164 _TR1	=	0x008e
                    008F    165 _TF1	=	0x008f
                    0090    166 _P1_0	=	0x0090
                    0091    167 _P1_1	=	0x0091
                    0092    168 _P1_2	=	0x0092
                    0093    169 _P1_3	=	0x0093
                    0094    170 _P1_4	=	0x0094
                    0095    171 _P1_5	=	0x0095
                    0096    172 _P1_6	=	0x0096
                    0097    173 _P1_7	=	0x0097
                    0098    174 _RI	=	0x0098
                    0099    175 _TI	=	0x0099
                    009A    176 _RB8	=	0x009a
                    009B    177 _TB8	=	0x009b
                    009C    178 _REN	=	0x009c
                    009D    179 _SM2	=	0x009d
                    009E    180 _SM1	=	0x009e
                    009F    181 _SM0	=	0x009f
                    00A0    182 _P2_0	=	0x00a0
                    00A1    183 _P2_1	=	0x00a1
                    00A2    184 _P2_2	=	0x00a2
                    00A3    185 _P2_3	=	0x00a3
                    00A4    186 _P2_4	=	0x00a4
                    00A5    187 _P2_5	=	0x00a5
                    00A6    188 _P2_6	=	0x00a6
                    00A7    189 _P2_7	=	0x00a7
                    00A8    190 _EX0	=	0x00a8
                    00A9    191 _ET0	=	0x00a9
                    00AA    192 _EX1	=	0x00aa
                    00AB    193 _ET1	=	0x00ab
                    00AC    194 _ES	=	0x00ac
                    00AF    195 _EA	=	0x00af
                    00B0    196 _P3_0	=	0x00b0
                    00B1    197 _P3_1	=	0x00b1
                    00B2    198 _P3_2	=	0x00b2
                    00B3    199 _P3_3	=	0x00b3
                    00B4    200 _P3_4	=	0x00b4
                    00B5    201 _P3_5	=	0x00b5
                    00B6    202 _P3_6	=	0x00b6
                    00B7    203 _P3_7	=	0x00b7
                    00B0    204 _RXD	=	0x00b0
                    00B1    205 _TXD	=	0x00b1
                    00B2    206 _INT0	=	0x00b2
                    00B3    207 _INT1	=	0x00b3
                    00B4    208 _T0	=	0x00b4
                    00B5    209 _T1	=	0x00b5
                    00B6    210 _WR	=	0x00b6
                    00B7    211 _RD	=	0x00b7
                    00B8    212 _PX0	=	0x00b8
                    00B9    213 _PT0	=	0x00b9
                    00BA    214 _PX1	=	0x00ba
                    00BB    215 _PT1	=	0x00bb
                    00BC    216 _PS	=	0x00bc
                    00D0    217 _P	=	0x00d0
                    00D1    218 _F1	=	0x00d1
                    00D2    219 _OV	=	0x00d2
                    00D3    220 _RS0	=	0x00d3
                    00D4    221 _RS1	=	0x00d4
                    00D5    222 _F0	=	0x00d5
                    00D6    223 _AC	=	0x00d6
                    00D7    224 _CY	=	0x00d7
                            225 ;--------------------------------------------------------
                            226 ; overlayable register banks
                            227 ;--------------------------------------------------------
                            228 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     229 	.ds 8
                            230 ;--------------------------------------------------------
                            231 ; internal ram data
                            232 ;--------------------------------------------------------
                            233 	.area DSEG    (DATA)
   0000                     234 _serialControl_sloc0_1_0:
   0000                     235 	.ds 2
   0002                     236 _serialControl_sloc1_1_0:
   0002                     237 	.ds 3
   0005                     238 _serialControl_sloc2_1_0:
   0005                     239 	.ds 3
   0008                     240 _serialControl_sloc3_1_0:
   0008                     241 	.ds 3
                            242 ;--------------------------------------------------------
                            243 ; overlayable items in internal ram 
                            244 ;--------------------------------------------------------
                            245 	.area OSEG    (OVR,DATA)
                            246 ;--------------------------------------------------------
                            247 ; indirectly addressable internal ram data
                            248 ;--------------------------------------------------------
                            249 	.area ISEG    (DATA)
                            250 ;--------------------------------------------------------
                            251 ; absolute internal ram data
                            252 ;--------------------------------------------------------
                            253 	.area IABS    (ABS,DATA)
                            254 	.area IABS    (ABS,DATA)
                            255 ;--------------------------------------------------------
                            256 ; bit data
                            257 ;--------------------------------------------------------
                            258 	.area BSEG    (BIT)
                            259 ;--------------------------------------------------------
                            260 ; paged external ram data
                            261 ;--------------------------------------------------------
                            262 	.area PSEG    (PAG,XDATA)
                            263 ;--------------------------------------------------------
                            264 ; external ram data
                            265 ;--------------------------------------------------------
                            266 	.area XSEG    (XDATA)
                    FFC2    267 _winstLCD	=	0xffc2
                    FFD2    268 _wdataLCD	=	0xffd2
                    FFE2    269 _rinstLCD	=	0xffe2
                    FFF2    270 _rdataLCD	=	0xfff2
   0000                     271 _point:
   0000                     272 	.ds 8
   0008                     273 _SCmap::
   0008                     274 	.ds 64
   0048                     275 _map::
   0048                     276 	.ds 64
   0088                     277 _Timer0::
   0088                     278 	.ds 7
   008F                     279 _player::
   008F                     280 	.ds 3
   0092                     281 _transmitter_message_1_1:
   0092                     282 	.ds 1
   0093                     283 _transNumber_number_1_1:
   0093                     284 	.ds 1
   0094                     285 _serialConfig_PARM_2:
   0094                     286 	.ds 3
   0097                     287 _serialConfig_read_1_1:
   0097                     288 	.ds 1
   0098                     289 _serialControl_PARM_2:
   0098                     290 	.ds 3
   009B                     291 _serialControl_scmap_1_1:
   009B                     292 	.ds 3
   009E                     293 _serialControl_logic_op_1_1:
   009E                     294 	.ds 1
                            295 ;--------------------------------------------------------
                            296 ; absolute external ram data
                            297 ;--------------------------------------------------------
                            298 	.area XABS    (ABS,XDATA)
                            299 ;--------------------------------------------------------
                            300 ; external initialized ram data
                            301 ;--------------------------------------------------------
                            302 	.area XISEG   (XDATA)
   0000                     303 _rxMsg:
   0000                     304 	.ds 1
                            305 	.area HOME    (CODE)
                            306 	.area GSINIT0 (CODE)
                            307 	.area GSINIT1 (CODE)
                            308 	.area GSINIT2 (CODE)
                            309 	.area GSINIT3 (CODE)
                            310 	.area GSINIT4 (CODE)
                            311 	.area GSINIT5 (CODE)
                            312 	.area GSINIT  (CODE)
                            313 	.area GSFINAL (CODE)
                            314 	.area CSEG    (CODE)
                            315 ;--------------------------------------------------------
                            316 ; global & static initialisations
                            317 ;--------------------------------------------------------
                            318 	.area HOME    (CODE)
                            319 	.area GSINIT  (CODE)
                            320 	.area GSFINAL (CODE)
                            321 	.area GSINIT  (CODE)
                            322 ;--------------------------------------------------------
                            323 ; Home
                            324 ;--------------------------------------------------------
                            325 	.area HOME    (CODE)
                            326 	.area HOME    (CODE)
                            327 ;--------------------------------------------------------
                            328 ; code
                            329 ;--------------------------------------------------------
                            330 	.area CSEG    (CODE)
                            331 ;------------------------------------------------------------
                            332 ;Allocation info for local variables in function 'transmitter'
                            333 ;------------------------------------------------------------
                            334 ;message                   Allocated with name '_transmitter_message_1_1'
                            335 ;------------------------------------------------------------
                            336 ;	SERIAL.c:9: void transmitter(unsigned char message){
                            337 ;	-----------------------------------------
                            338 ;	 function transmitter
                            339 ;	-----------------------------------------
   0000                     340 _transmitter:
                    0002    341 	ar2 = 0x02
                    0003    342 	ar3 = 0x03
                    0004    343 	ar4 = 0x04
                    0005    344 	ar5 = 0x05
                    0006    345 	ar6 = 0x06
                    0007    346 	ar7 = 0x07
                    0000    347 	ar0 = 0x00
                    0001    348 	ar1 = 0x01
   0000 E5 82               349 	mov	a,dpl
   0002 90s00r92            350 	mov	dptr,#_transmitter_message_1_1
   0005 F0                  351 	movx	@dptr,a
                            352 ;	SERIAL.c:10: if(! TI){
   0006 20 99 0B            353 	jb	_TI,00106$
                            354 ;	SERIAL.c:11: SBUF = message;				// Manda a mensagem para o buffer
   0009 90s00r92            355 	mov	dptr,#_transmitter_message_1_1
   000C E0                  356 	movx	a,@dptr
   000D F5 99               357 	mov	_SBUF,a
                            358 ;	SERIAL.c:13: while(TI == 0);		// Esperando a flag TI parar a transmissão
   000F                     359 00101$:
                            360 ;	SERIAL.c:14: TI = 0;			// Zerando a flag
   000F 10 99 02            361 	jbc	_TI,00112$
   0012 80 FB               362 	sjmp	00101$
   0014                     363 00112$:
   0014                     364 00106$:
   0014 22                  365 	ret
                            366 ;------------------------------------------------------------
                            367 ;Allocation info for local variables in function 'transNumber'
                            368 ;------------------------------------------------------------
                            369 ;number                    Allocated with name '_transNumber_number_1_1'
                            370 ;------------------------------------------------------------
                            371 ;	SERIAL.c:19: void transNumber(unsigned char number){
                            372 ;	-----------------------------------------
                            373 ;	 function transNumber
                            374 ;	-----------------------------------------
   0015                     375 _transNumber:
   0015 E5 82               376 	mov	a,dpl
   0017 90s00r93            377 	mov	dptr,#_transNumber_number_1_1
   001A F0                  378 	movx	@dptr,a
                            379 ;	SERIAL.c:21: transmitter(number/10 + '0'); 
   001B 90s00r93            380 	mov	dptr,#_transNumber_number_1_1
   001E E0                  381 	movx	a,@dptr
   001F FA                  382 	mov	r2,a
   0020 75 F0 0A            383 	mov	b,#0x0A
   0023 84                  384 	div	ab
   0024 24 30               385 	add	a,#0x30
   0026 F5 82               386 	mov	dpl,a
   0028 C0 02               387 	push	ar2
   002A 12s00r00            388 	lcall	_transmitter
   002D D0 02               389 	pop	ar2
                            390 ;	SERIAL.c:22: transmitter(number%10 + '0'); 
   002F 75 F0 0A            391 	mov	b,#0x0A
   0032 EA                  392 	mov	a,r2
   0033 84                  393 	div	ab
   0034 E5 F0               394 	mov	a,b
   0036 24 30               395 	add	a,#0x30
   0038 F5 82               396 	mov	dpl,a
   003A 12s00r00            397 	lcall	_transmitter
                            398 ;	SERIAL.c:23: transmitter('\n'); 
   003D 75 82 0A            399 	mov	dpl,#0x0A
   0040 02s00r00            400 	ljmp	_transmitter
                            401 ;------------------------------------------------------------
                            402 ;Allocation info for local variables in function 'receiver'
                            403 ;------------------------------------------------------------
                            404 ;------------------------------------------------------------
                            405 ;	SERIAL.c:26: char receiver(){
                            406 ;	-----------------------------------------
                            407 ;	 function receiver
                            408 ;	-----------------------------------------
   0043                     409 _receiver:
                            410 ;	SERIAL.c:27: return SBUF;						// Recebe a mensagem do buffer
   0043 AA 99               411 	mov	r2,_SBUF
   0045 8A 82               412 	mov	dpl,r2
   0047 22                  413 	ret
                            414 ;------------------------------------------------------------
                            415 ;Allocation info for local variables in function 'receivedChar'
                            416 ;------------------------------------------------------------
                            417 ;------------------------------------------------------------
                            418 ;	SERIAL.c:30: char receivedChar(){
                            419 ;	-----------------------------------------
                            420 ;	 function receivedChar
                            421 ;	-----------------------------------------
   0048                     422 _receivedChar:
                            423 ;	SERIAL.c:31: return rxMsg;
   0048 90s00r00            424 	mov	dptr,#_rxMsg
   004B E0                  425 	movx	a,@dptr
   004C F5 82               426 	mov	dpl,a
   004E 22                  427 	ret
                            428 ;------------------------------------------------------------
                            429 ;Allocation info for local variables in function 'serialConfig'
                            430 ;------------------------------------------------------------
                            431 ;gamer                     Allocated with name '_serialConfig_PARM_2'
                            432 ;read                      Allocated with name '_serialConfig_read_1_1'
                            433 ;------------------------------------------------------------
                            434 ;	SERIAL.c:34: void serialConfig(unsigned char read, struct position *gamer){
                            435 ;	-----------------------------------------
                            436 ;	 function serialConfig
                            437 ;	-----------------------------------------
   004F                     438 _serialConfig:
   004F E5 82               439 	mov	a,dpl
   0051 90s00r97            440 	mov	dptr,#_serialConfig_read_1_1
   0054 F0                  441 	movx	@dptr,a
                            442 ;	SERIAL.c:35: player = gamer;
   0055 90s00r94            443 	mov	dptr,#_serialConfig_PARM_2
   0058 E0                  444 	movx	a,@dptr
   0059 FA                  445 	mov	r2,a
   005A A3                  446 	inc	dptr
   005B E0                  447 	movx	a,@dptr
   005C FB                  448 	mov	r3,a
   005D A3                  449 	inc	dptr
   005E E0                  450 	movx	a,@dptr
   005F FC                  451 	mov	r4,a
   0060 90s00r8F            452 	mov	dptr,#_player
   0063 EA                  453 	mov	a,r2
   0064 F0                  454 	movx	@dptr,a
   0065 A3                  455 	inc	dptr
   0066 EB                  456 	mov	a,r3
   0067 F0                  457 	movx	@dptr,a
   0068 A3                  458 	inc	dptr
   0069 EC                  459 	mov	a,r4
   006A F0                  460 	movx	@dptr,a
                            461 ;	SERIAL.c:37: if(read)
   006B 90s00r97            462 	mov	dptr,#_serialConfig_read_1_1
   006E E0                  463 	movx	a,@dptr
   006F FA                  464 	mov	r2,a
   0070 60 04               465 	jz	00102$
                            466 ;	SERIAL.c:38: SCON = 0x50; 						// Configurando o modo 1 para serial (05 Serial.pdf de sistmicro)
   0072 75 98 50            467 	mov	_SCON,#0x50
                            468 ;	SERIAL.c:40: SCON = 0x40;
   0075 22                  469 	ret
   0076                     470 00102$:
   0076 75 98 40            471 	mov	_SCON,#0x40
   0079 22                  472 	ret
                            473 ;------------------------------------------------------------
                            474 ;Allocation info for local variables in function 'serialBegin'
                            475 ;------------------------------------------------------------
                            476 ;------------------------------------------------------------
                            477 ;	SERIAL.c:44: unsigned char serialBegin(){
                            478 ;	-----------------------------------------
                            479 ;	 function serialBegin
                            480 ;	-----------------------------------------
   007A                     481 _serialBegin:
                            482 ;	SERIAL.c:46: if(RI){
   007A 30 98 11            483 	jnb	_RI,00104$
                            484 ;	SERIAL.c:47: rxMsg = receiver();
   007D 12s00r43            485 	lcall	_receiver
   0080 AA 82               486 	mov	r2,dpl
   0082 90s00r00            487 	mov	dptr,#_rxMsg
   0085 EA                  488 	mov	a,r2
   0086 F0                  489 	movx	@dptr,a
                            490 ;	SERIAL.c:49: if(rxMsg == ' ')
   0087 BA 20 04            491 	cjne	r2,#0x20,00104$
                            492 ;	SERIAL.c:50: return 0;
   008A 75 82 00            493 	mov	dpl,#0x00
                            494 ;	SERIAL.c:53: return 1;
   008D 22                  495 	ret
   008E                     496 00104$:
   008E 75 82 01            497 	mov	dpl,#0x01
   0091 22                  498 	ret
                            499 ;------------------------------------------------------------
                            500 ;Allocation info for local variables in function 'serialControl'
                            501 ;------------------------------------------------------------
                            502 ;sloc0                     Allocated with name '_serialControl_sloc0_1_0'
                            503 ;sloc1                     Allocated with name '_serialControl_sloc1_1_0'
                            504 ;sloc2                     Allocated with name '_serialControl_sloc2_1_0'
                            505 ;sloc3                     Allocated with name '_serialControl_sloc3_1_0'
                            506 ;map                       Allocated with name '_serialControl_PARM_2'
                            507 ;scmap                     Allocated with name '_serialControl_scmap_1_1'
                            508 ;logic_op                  Allocated with name '_serialControl_logic_op_1_1'
                            509 ;------------------------------------------------------------
                            510 ;	SERIAL.c:56: unsigned char serialControl(struct SChar scmap[8],struct Map map[4][16]){
                            511 ;	-----------------------------------------
                            512 ;	 function serialControl
                            513 ;	-----------------------------------------
   0092                     514 _serialControl:
   0092 AA F0               515 	mov	r2,b
   0094 AB 83               516 	mov	r3,dph
   0096 E5 82               517 	mov	a,dpl
   0098 90s00r9B            518 	mov	dptr,#_serialControl_scmap_1_1
   009B F0                  519 	movx	@dptr,a
   009C A3                  520 	inc	dptr
   009D EB                  521 	mov	a,r3
   009E F0                  522 	movx	@dptr,a
   009F A3                  523 	inc	dptr
   00A0 EA                  524 	mov	a,r2
   00A1 F0                  525 	movx	@dptr,a
                            526 ;	SERIAL.c:58: unsigned char logic_op = 1;
   00A2 90s00r9E            527 	mov	dptr,#_serialControl_logic_op_1_1
   00A5 74 01               528 	mov	a,#0x01
   00A7 F0                  529 	movx	@dptr,a
                            530 ;	SERIAL.c:60: LCD_putSCharAt(player->sline,player->scol, player->line,player->col);
   00A8 90s00r8F            531 	mov	dptr,#_player
   00AB E0                  532 	movx	a,@dptr
   00AC FA                  533 	mov	r2,a
   00AD A3                  534 	inc	dptr
   00AE E0                  535 	movx	a,@dptr
   00AF FB                  536 	mov	r3,a
   00B0 A3                  537 	inc	dptr
   00B1 E0                  538 	movx	a,@dptr
   00B2 FC                  539 	mov	r4,a
   00B3 8A 82               540 	mov	dpl,r2
   00B5 8B 83               541 	mov	dph,r3
   00B7 8C F0               542 	mov	b,r4
   00B9 12s00r00            543 	lcall	__gptrget
   00BC FD                  544 	mov	r5,a
   00BD 74 01               545 	mov	a,#0x01
   00BF 2A                  546 	add	a,r2
   00C0 FE                  547 	mov	r6,a
   00C1 E4                  548 	clr	a
   00C2 3B                  549 	addc	a,r3
   00C3 FF                  550 	mov	r7,a
   00C4 8C 00               551 	mov	ar0,r4
   00C6 8E 82               552 	mov	dpl,r6
   00C8 8F 83               553 	mov	dph,r7
   00CA 88 F0               554 	mov	b,r0
   00CC 12s00r00            555 	lcall	__gptrget
   00CF FE                  556 	mov	r6,a
   00D0 74 02               557 	mov	a,#0x02
   00D2 2A                  558 	add	a,r2
   00D3 FF                  559 	mov	r7,a
   00D4 E4                  560 	clr	a
   00D5 3B                  561 	addc	a,r3
   00D6 F8                  562 	mov	r0,a
   00D7 8C 01               563 	mov	ar1,r4
   00D9 8F 82               564 	mov	dpl,r7
   00DB 88 83               565 	mov	dph,r0
   00DD 89 F0               566 	mov	b,r1
   00DF 12s00r00            567 	lcall	__gptrget
   00E2 FF                  568 	mov	r7,a
   00E3 74 03               569 	mov	a,#0x03
   00E5 2A                  570 	add	a,r2
   00E6 FA                  571 	mov	r2,a
   00E7 E4                  572 	clr	a
   00E8 3B                  573 	addc	a,r3
   00E9 FB                  574 	mov	r3,a
   00EA 8A 82               575 	mov	dpl,r2
   00EC 8B 83               576 	mov	dph,r3
   00EE 8C F0               577 	mov	b,r4
   00F0 12s00r00            578 	lcall	__gptrget
   00F3 FA                  579 	mov	r2,a
   00F4 90s00r00            580 	mov	dptr,#_LCD_putSCharAt_PARM_2
   00F7 EE                  581 	mov	a,r6
   00F8 F0                  582 	movx	@dptr,a
   00F9 90s00r00            583 	mov	dptr,#_LCD_putSCharAt_PARM_3
   00FC EF                  584 	mov	a,r7
   00FD F0                  585 	movx	@dptr,a
   00FE 90s00r00            586 	mov	dptr,#_LCD_putSCharAt_PARM_4
   0101 EA                  587 	mov	a,r2
   0102 F0                  588 	movx	@dptr,a
   0103 8D 82               589 	mov	dpl,r5
   0105 12s00r00            590 	lcall	_LCD_putSCharAt
                            591 ;	SERIAL.c:62: if(RI){
   0108 20 98 03            592 	jb	_RI,00214$
   010B 02s0Br45            593 	ljmp	00178$
   010E                     594 00214$:
                            595 ;	SERIAL.c:63: rxMsg = receiver();
   010E 12s00r43            596 	lcall	_receiver
   0111 AA 82               597 	mov	r2,dpl
   0113 90s00r00            598 	mov	dptr,#_rxMsg
   0116 EA                  599 	mov	a,r2
   0117 F0                  600 	movx	@dptr,a
                            601 ;	SERIAL.c:65: if(rxMsg == 'w' || rxMsg == 'W'){		
   0118 BA 77 02            602 	cjne	r2,#0x77,00215$
   011B 80 08               603 	sjmp	00173$
   011D                     604 00215$:
   011D BA 57 02            605 	cjne	r2,#0x57,00216$
   0120 80 03               606 	sjmp	00217$
   0122                     607 00216$:
   0122 02s03rBB            608 	ljmp	00174$
   0125                     609 00217$:
   0125                     610 00173$:
                            611 ;	SERIAL.c:67: if((player->sline - 1) >0)
   0125 90s00r8F            612 	mov	dptr,#_player
   0128 E0                  613 	movx	a,@dptr
   0129 FB                  614 	mov	r3,a
   012A A3                  615 	inc	dptr
   012B E0                  616 	movx	a,@dptr
   012C FC                  617 	mov	r4,a
   012D A3                  618 	inc	dptr
   012E E0                  619 	movx	a,@dptr
   012F FD                  620 	mov	r5,a
   0130 8B 82               621 	mov	dpl,r3
   0132 8C 83               622 	mov	dph,r4
   0134 8D F0               623 	mov	b,r5
   0136 12s00r00            624 	lcall	__gptrget
   0139 FE                  625 	mov	r6,a
   013A FF                  626 	mov	r7,a
   013B 78 00               627 	mov	r0,#0x00
   013D 1F                  628 	dec	r7
   013E BF FF 01            629 	cjne	r7,#0xff,00218$
   0141 18                  630 	dec	r0
   0142                     631 00218$:
   0142 C3                  632 	clr	c
   0143 E4                  633 	clr	a
   0144 9F                  634 	subb	a,r7
   0145 74 80               635 	mov	a,#(0x00 ^ 0x80)
   0147 88 F0               636 	mov	b,r0
   0149 63 F0 80            637 	xrl	b,#0x80
   014C 95 F0               638 	subb	a,b
   014E 40 03               639 	jc	00219$
   0150 02s02r3D            640 	ljmp	00109$
   0153                     641 00219$:
                            642 ;	SERIAL.c:68: logic_op = scmap[(map[player->line-1][player->col-1].schar) - 1].adds[player->sline-2] & (pow(2,5-player->scol));
   0153 74 02               643 	mov	a,#0x02
   0155 2B                  644 	add	a,r3
   0156 FF                  645 	mov	r7,a
   0157 E4                  646 	clr	a
   0158 3C                  647 	addc	a,r4
   0159 F8                  648 	mov	r0,a
   015A 8D 01               649 	mov	ar1,r5
   015C 8F 82               650 	mov	dpl,r7
   015E 88 83               651 	mov	dph,r0
   0160 89 F0               652 	mov	b,r1
   0162 12s00r00            653 	lcall	__gptrget
   0165 78 00               654 	mov	r0,#0x00
   0167 24 FF               655 	add	a,#0xff
   0169 F5*00               656 	mov	_serialControl_sloc0_1_0,a
   016B E8                  657 	mov	a,r0
   016C 34 FF               658 	addc	a,#0xff
   016E F5*01               659 	mov	(_serialControl_sloc0_1_0 + 1),a
   0170 90s00r98            660 	mov	dptr,#_serialControl_PARM_2
   0173 E0                  661 	movx	a,@dptr
   0174 F5*02               662 	mov	_serialControl_sloc1_1_0,a
   0176 A3                  663 	inc	dptr
   0177 E0                  664 	movx	a,@dptr
   0178 F5*03               665 	mov	(_serialControl_sloc1_1_0 + 1),a
   017A A3                  666 	inc	dptr
   017B E0                  667 	movx	a,@dptr
   017C F5*04               668 	mov	(_serialControl_sloc1_1_0 + 2),a
   017E AF*00               669 	mov	r7,_serialControl_sloc0_1_0
   0180 E5*01               670 	mov	a,(_serialControl_sloc0_1_0 + 1)
   0182 C4                  671 	swap	a
   0183 54 F0               672 	anl	a,#0xf0
   0185 CF                  673 	xch	a,r7
   0186 C4                  674 	swap	a
   0187 CF                  675 	xch	a,r7
   0188 6F                  676 	xrl	a,r7
   0189 CF                  677 	xch	a,r7
   018A 54 F0               678 	anl	a,#0xf0
   018C CF                  679 	xch	a,r7
   018D 6F                  680 	xrl	a,r7
   018E F8                  681 	mov	r0,a
   018F EF                  682 	mov	a,r7
   0190 25*02               683 	add	a,_serialControl_sloc1_1_0
   0192 F5*02               684 	mov	_serialControl_sloc1_1_0,a
   0194 E8                  685 	mov	a,r0
   0195 35*03               686 	addc	a,(_serialControl_sloc1_1_0 + 1)
   0197 F5*03               687 	mov	(_serialControl_sloc1_1_0 + 1),a
   0199 74 03               688 	mov	a,#0x03
   019B 2B                  689 	add	a,r3
   019C FF                  690 	mov	r7,a
   019D E4                  691 	clr	a
   019E 3C                  692 	addc	a,r4
   019F F8                  693 	mov	r0,a
   01A0 8D 01               694 	mov	ar1,r5
   01A2 8F 82               695 	mov	dpl,r7
   01A4 88 83               696 	mov	dph,r0
   01A6 89 F0               697 	mov	b,r1
   01A8 12s00r00            698 	lcall	__gptrget
   01AB 14                  699 	dec	a
   01AC 25*02               700 	add	a,_serialControl_sloc1_1_0
   01AE FF                  701 	mov	r7,a
   01AF E4                  702 	clr	a
   01B0 35*03               703 	addc	a,(_serialControl_sloc1_1_0 + 1)
   01B2 F8                  704 	mov	r0,a
   01B3 A9*04               705 	mov	r1,(_serialControl_sloc1_1_0 + 2)
   01B5 8F 82               706 	mov	dpl,r7
   01B7 88 83               707 	mov	dph,r0
   01B9 89 F0               708 	mov	b,r1
   01BB 12s00r00            709 	lcall	__gptrget
   01BE FF                  710 	mov	r7,a
   01BF 33                  711 	rlc	a
   01C0 95 E0               712 	subb	a,acc
   01C2 F8                  713 	mov	r0,a
   01C3 EF                  714 	mov	a,r7
   01C4 24 FF               715 	add	a,#0xff
   01C6 F5*02               716 	mov	_serialControl_sloc1_1_0,a
   01C8 E8                  717 	mov	a,r0
   01C9 34 FF               718 	addc	a,#0xff
   01CB F5*03               719 	mov	(_serialControl_sloc1_1_0 + 1),a
   01CD 90s00r9B            720 	mov	dptr,#_serialControl_scmap_1_1
   01D0 E0                  721 	movx	a,@dptr
   01D1 F5*05               722 	mov	_serialControl_sloc2_1_0,a
   01D3 A3                  723 	inc	dptr
   01D4 E0                  724 	movx	a,@dptr
   01D5 F5*06               725 	mov	(_serialControl_sloc2_1_0 + 1),a
   01D7 A3                  726 	inc	dptr
   01D8 E0                  727 	movx	a,@dptr
   01D9 F5*07               728 	mov	(_serialControl_sloc2_1_0 + 2),a
   01DB AF*02               729 	mov	r7,_serialControl_sloc1_1_0
   01DD E5*03               730 	mov	a,(_serialControl_sloc1_1_0 + 1)
   01DF C4                  731 	swap	a
   01E0 03                  732 	rr	a
   01E1 54 F8               733 	anl	a,#0xf8
   01E3 CF                  734 	xch	a,r7
   01E4 C4                  735 	swap	a
   01E5 03                  736 	rr	a
   01E6 CF                  737 	xch	a,r7
   01E7 6F                  738 	xrl	a,r7
   01E8 CF                  739 	xch	a,r7
   01E9 54 F8               740 	anl	a,#0xf8
   01EB CF                  741 	xch	a,r7
   01EC 6F                  742 	xrl	a,r7
   01ED F8                  743 	mov	r0,a
   01EE EF                  744 	mov	a,r7
   01EF 25*05               745 	add	a,_serialControl_sloc2_1_0
   01F1 FF                  746 	mov	r7,a
   01F2 E8                  747 	mov	a,r0
   01F3 35*06               748 	addc	a,(_serialControl_sloc2_1_0 + 1)
   01F5 F8                  749 	mov	r0,a
   01F6 A9*07               750 	mov	r1,(_serialControl_sloc2_1_0 + 2)
   01F8 EE                  751 	mov	a,r6
   01F9 24 FE               752 	add	a,#0xfe
   01FB 2F                  753 	add	a,r7
   01FC F5*05               754 	mov	_serialControl_sloc2_1_0,a
   01FE E4                  755 	clr	a
   01FF 38                  756 	addc	a,r0
   0200 F5*06               757 	mov	(_serialControl_sloc2_1_0 + 1),a
   0202 89*07               758 	mov	(_serialControl_sloc2_1_0 + 2),r1
   0204 74 01               759 	mov	a,#0x01
   0206 2B                  760 	add	a,r3
   0207 FF                  761 	mov	r7,a
   0208 E4                  762 	clr	a
   0209 3C                  763 	addc	a,r4
   020A F8                  764 	mov	r0,a
   020B 8D 01               765 	mov	ar1,r5
   020D 8F 82               766 	mov	dpl,r7
   020F 88 83               767 	mov	dph,r0
   0211 89 F0               768 	mov	b,r1
   0213 12s00r00            769 	lcall	__gptrget
   0216 FF                  770 	mov	r7,a
   0217 90s00r00            771 	mov	dptr,#_pow_PARM_2
   021A 74 05               772 	mov	a,#0x05
   021C C3                  773 	clr	c
   021D 9F                  774 	subb	a,r7
   021E F0                  775 	movx	@dptr,a
   021F 75 82 02            776 	mov	dpl,#0x02
   0222 12s00r00            777 	lcall	_pow
   0225 AF 82               778 	mov	r7,dpl
   0227 85*05 82            779 	mov	dpl,_serialControl_sloc2_1_0
   022A 85*06 83            780 	mov	dph,(_serialControl_sloc2_1_0 + 1)
   022D 85*07 F0            781 	mov	b,(_serialControl_sloc2_1_0 + 2)
   0230 12s00r00            782 	lcall	__gptrget
   0233 F8                  783 	mov	r0,a
   0234 90s00r9E            784 	mov	dptr,#_serialControl_logic_op_1_1
   0237 EF                  785 	mov	a,r7
   0238 58                  786 	anl	a,r0
   0239 F0                  787 	movx	@dptr,a
   023A 02s03r57            788 	ljmp	00110$
   023D                     789 00109$:
                            790 ;	SERIAL.c:69: else if(player->sline == 1 && player->line > 1)
   023D E4                  791 	clr	a
   023E BE 01 01            792 	cjne	r6,#0x01,00220$
   0241 04                  793 	inc	a
   0242                     794 00220$:
   0242 FE                  795 	mov	r6,a
   0243 70 03               796 	jnz	00222$
   0245 02s03r3C            797 	ljmp	00105$
   0248                     798 00222$:
   0248 74 02               799 	mov	a,#0x02
   024A 2B                  800 	add	a,r3
   024B FF                  801 	mov	r7,a
   024C E4                  802 	clr	a
   024D 3C                  803 	addc	a,r4
   024E F8                  804 	mov	r0,a
   024F 8D 01               805 	mov	ar1,r5
   0251 8F 82               806 	mov	dpl,r7
   0253 88 83               807 	mov	dph,r0
   0255 89 F0               808 	mov	b,r1
   0257 12s00r00            809 	lcall	__gptrget
   025A FF                  810 	mov  r7,a
   025B 24 FE               811 	add	a,#0xff - 0x01
   025D 40 03               812 	jc	00223$
   025F 02s03r3C            813 	ljmp	00105$
   0262                     814 00223$:
                            815 ;	SERIAL.c:70: logic_op = scmap[(map[player->line-2][player->col-1].schar) - 1].adds[7] & (pow(2,5-player->scol));
   0262 78 00               816 	mov	r0,#0x00
   0264 EF                  817 	mov	a,r7
   0265 24 FE               818 	add	a,#0xfe
   0267 F5*05               819 	mov	_serialControl_sloc2_1_0,a
   0269 E8                  820 	mov	a,r0
   026A 34 FF               821 	addc	a,#0xff
   026C F5*06               822 	mov	(_serialControl_sloc2_1_0 + 1),a
   026E 90s00r98            823 	mov	dptr,#_serialControl_PARM_2
   0271 E0                  824 	movx	a,@dptr
   0272 F5*02               825 	mov	_serialControl_sloc1_1_0,a
   0274 A3                  826 	inc	dptr
   0275 E0                  827 	movx	a,@dptr
   0276 F5*03               828 	mov	(_serialControl_sloc1_1_0 + 1),a
   0278 A3                  829 	inc	dptr
   0279 E0                  830 	movx	a,@dptr
   027A F5*04               831 	mov	(_serialControl_sloc1_1_0 + 2),a
   027C AF*05               832 	mov	r7,_serialControl_sloc2_1_0
   027E E5*06               833 	mov	a,(_serialControl_sloc2_1_0 + 1)
   0280 C4                  834 	swap	a
   0281 54 F0               835 	anl	a,#0xf0
   0283 CF                  836 	xch	a,r7
   0284 C4                  837 	swap	a
   0285 CF                  838 	xch	a,r7
   0286 6F                  839 	xrl	a,r7
   0287 CF                  840 	xch	a,r7
   0288 54 F0               841 	anl	a,#0xf0
   028A CF                  842 	xch	a,r7
   028B 6F                  843 	xrl	a,r7
   028C F8                  844 	mov	r0,a
   028D EF                  845 	mov	a,r7
   028E 25*02               846 	add	a,_serialControl_sloc1_1_0
   0290 F5*05               847 	mov	_serialControl_sloc2_1_0,a
   0292 E8                  848 	mov	a,r0
   0293 35*03               849 	addc	a,(_serialControl_sloc1_1_0 + 1)
   0295 F5*06               850 	mov	(_serialControl_sloc2_1_0 + 1),a
   0297 85*04*07            851 	mov	(_serialControl_sloc2_1_0 + 2),(_serialControl_sloc1_1_0 + 2)
   029A 74 03               852 	mov	a,#0x03
   029C 2B                  853 	add	a,r3
   029D FF                  854 	mov	r7,a
   029E E4                  855 	clr	a
   029F 3C                  856 	addc	a,r4
   02A0 F8                  857 	mov	r0,a
   02A1 8D 01               858 	mov	ar1,r5
   02A3 8F 82               859 	mov	dpl,r7
   02A5 88 83               860 	mov	dph,r0
   02A7 89 F0               861 	mov	b,r1
   02A9 12s00r00            862 	lcall	__gptrget
   02AC 14                  863 	dec	a
   02AD 25*05               864 	add	a,_serialControl_sloc2_1_0
   02AF FF                  865 	mov	r7,a
   02B0 E4                  866 	clr	a
   02B1 35*06               867 	addc	a,(_serialControl_sloc2_1_0 + 1)
   02B3 F8                  868 	mov	r0,a
   02B4 A9*07               869 	mov	r1,(_serialControl_sloc2_1_0 + 2)
   02B6 8F 82               870 	mov	dpl,r7
   02B8 88 83               871 	mov	dph,r0
   02BA 89 F0               872 	mov	b,r1
   02BC 12s00r00            873 	lcall	__gptrget
   02BF FF                  874 	mov	r7,a
   02C0 33                  875 	rlc	a
   02C1 95 E0               876 	subb	a,acc
   02C3 F8                  877 	mov	r0,a
   02C4 EF                  878 	mov	a,r7
   02C5 24 FF               879 	add	a,#0xff
   02C7 F5*05               880 	mov	_serialControl_sloc2_1_0,a
   02C9 E8                  881 	mov	a,r0
   02CA 34 FF               882 	addc	a,#0xff
   02CC F5*06               883 	mov	(_serialControl_sloc2_1_0 + 1),a
   02CE 90s00r9B            884 	mov	dptr,#_serialControl_scmap_1_1
   02D1 E0                  885 	movx	a,@dptr
   02D2 F5*02               886 	mov	_serialControl_sloc1_1_0,a
   02D4 A3                  887 	inc	dptr
   02D5 E0                  888 	movx	a,@dptr
   02D6 F5*03               889 	mov	(_serialControl_sloc1_1_0 + 1),a
   02D8 A3                  890 	inc	dptr
   02D9 E0                  891 	movx	a,@dptr
   02DA F5*04               892 	mov	(_serialControl_sloc1_1_0 + 2),a
   02DC AF*05               893 	mov	r7,_serialControl_sloc2_1_0
   02DE E5*06               894 	mov	a,(_serialControl_sloc2_1_0 + 1)
   02E0 C4                  895 	swap	a
   02E1 03                  896 	rr	a
   02E2 54 F8               897 	anl	a,#0xf8
   02E4 CF                  898 	xch	a,r7
   02E5 C4                  899 	swap	a
   02E6 03                  900 	rr	a
   02E7 CF                  901 	xch	a,r7
   02E8 6F                  902 	xrl	a,r7
   02E9 CF                  903 	xch	a,r7
   02EA 54 F8               904 	anl	a,#0xf8
   02EC CF                  905 	xch	a,r7
   02ED 6F                  906 	xrl	a,r7
   02EE F8                  907 	mov	r0,a
   02EF EF                  908 	mov	a,r7
   02F0 25*02               909 	add	a,_serialControl_sloc1_1_0
   02F2 FF                  910 	mov	r7,a
   02F3 E8                  911 	mov	a,r0
   02F4 35*03               912 	addc	a,(_serialControl_sloc1_1_0 + 1)
   02F6 F8                  913 	mov	r0,a
   02F7 A9*04               914 	mov	r1,(_serialControl_sloc1_1_0 + 2)
   02F9 74 07               915 	mov	a,#0x07
   02FB 2F                  916 	add	a,r7
   02FC F5*05               917 	mov	_serialControl_sloc2_1_0,a
   02FE E4                  918 	clr	a
   02FF 38                  919 	addc	a,r0
   0300 F5*06               920 	mov	(_serialControl_sloc2_1_0 + 1),a
   0302 89*07               921 	mov	(_serialControl_sloc2_1_0 + 2),r1
   0304 74 01               922 	mov	a,#0x01
   0306 2B                  923 	add	a,r3
   0307 FF                  924 	mov	r7,a
   0308 E4                  925 	clr	a
   0309 3C                  926 	addc	a,r4
   030A F8                  927 	mov	r0,a
   030B 8D 01               928 	mov	ar1,r5
   030D 8F 82               929 	mov	dpl,r7
   030F 88 83               930 	mov	dph,r0
   0311 89 F0               931 	mov	b,r1
   0313 12s00r00            932 	lcall	__gptrget
   0316 FF                  933 	mov	r7,a
   0317 90s00r00            934 	mov	dptr,#_pow_PARM_2
   031A 74 05               935 	mov	a,#0x05
   031C C3                  936 	clr	c
   031D 9F                  937 	subb	a,r7
   031E F0                  938 	movx	@dptr,a
   031F 75 82 02            939 	mov	dpl,#0x02
   0322 12s00r00            940 	lcall	_pow
   0325 AF 82               941 	mov	r7,dpl
   0327 85*05 82            942 	mov	dpl,_serialControl_sloc2_1_0
   032A 85*06 83            943 	mov	dph,(_serialControl_sloc2_1_0 + 1)
   032D 85*07 F0            944 	mov	b,(_serialControl_sloc2_1_0 + 2)
   0330 12s00r00            945 	lcall	__gptrget
   0333 F8                  946 	mov	r0,a
   0334 90s00r9E            947 	mov	dptr,#_serialControl_logic_op_1_1
   0337 EF                  948 	mov	a,r7
   0338 58                  949 	anl	a,r0
   0339 F0                  950 	movx	@dptr,a
   033A 80 1B               951 	sjmp	00110$
   033C                     952 00105$:
                            953 ;	SERIAL.c:71: else if(player->sline == 1 && player->line == 1 )
   033C EE                  954 	mov	a,r6
   033D 60 18               955 	jz	00110$
   033F 74 02               956 	mov	a,#0x02
   0341 2B                  957 	add	a,r3
   0342 FB                  958 	mov	r3,a
   0343 E4                  959 	clr	a
   0344 3C                  960 	addc	a,r4
   0345 FC                  961 	mov	r4,a
   0346 8B 82               962 	mov	dpl,r3
   0348 8C 83               963 	mov	dph,r4
   034A 8D F0               964 	mov	b,r5
   034C 12s00r00            965 	lcall	__gptrget
   034F FB                  966 	mov	r3,a
   0350 BB 01 04            967 	cjne	r3,#0x01,00110$
                            968 ;	SERIAL.c:72: return 0;
   0353 75 82 00            969 	mov	dpl,#0x00
   0356 22                  970 	ret
   0357                     971 00110$:
                            972 ;	SERIAL.c:75: if(logic_op == 0){
   0357 90s00r9E            973 	mov	dptr,#_serialControl_logic_op_1_1
   035A E0                  974 	movx	a,@dptr
   035B FB                  975 	mov	r3,a
   035C 60 03               976 	jz	00227$
   035E 02s0Br40            977 	ljmp	00175$
   0361                     978 00227$:
                            979 ;	SERIAL.c:76: if(player->sline != 1)
   0361 90s00r8F            980 	mov	dptr,#_player
   0364 E0                  981 	movx	a,@dptr
   0365 FB                  982 	mov	r3,a
   0366 A3                  983 	inc	dptr
   0367 E0                  984 	movx	a,@dptr
   0368 FC                  985 	mov	r4,a
   0369 A3                  986 	inc	dptr
   036A E0                  987 	movx	a,@dptr
   036B FD                  988 	mov	r5,a
   036C 8B 82               989 	mov	dpl,r3
   036E 8C 83               990 	mov	dph,r4
   0370 8D F0               991 	mov	b,r5
   0372 12s00r00            992 	lcall	__gptrget
   0375 FE                  993 	mov	r6,a
   0376 BE 01 02            994 	cjne	r6,#0x01,00228$
   0379 80 0E               995 	sjmp	00114$
   037B                     996 00228$:
                            997 ;	SERIAL.c:77: player->sline--;
   037B 1E                  998 	dec	r6
   037C 8B 82               999 	mov	dpl,r3
   037E 8C 83              1000 	mov	dph,r4
   0380 8D F0              1001 	mov	b,r5
   0382 EE                 1002 	mov	a,r6
   0383 12s00r00           1003 	lcall	__gptrput
   0386 02s0Br40           1004 	ljmp	00175$
   0389                    1005 00114$:
                           1006 ;	SERIAL.c:79: if(player->line != 1){
   0389 74 02              1007 	mov	a,#0x02
   038B 2B                 1008 	add	a,r3
   038C FE                 1009 	mov	r6,a
   038D E4                 1010 	clr	a
   038E 3C                 1011 	addc	a,r4
   038F FF                 1012 	mov	r7,a
   0390 8D 00              1013 	mov	ar0,r5
   0392 8E 82              1014 	mov	dpl,r6
   0394 8F 83              1015 	mov	dph,r7
   0396 88 F0              1016 	mov	b,r0
   0398 12s00r00           1017 	lcall	__gptrget
   039B F9                 1018 	mov	r1,a
   039C B9 01 03           1019 	cjne	r1,#0x01,00229$
   039F 02s0Br40           1020 	ljmp	00175$
   03A2                    1021 00229$:
                           1022 ;	SERIAL.c:80: player->sline = 8;
   03A2 8B 82              1023 	mov	dpl,r3
   03A4 8C 83              1024 	mov	dph,r4
   03A6 8D F0              1025 	mov	b,r5
   03A8 74 08              1026 	mov	a,#0x08
   03AA 12s00r00           1027 	lcall	__gptrput
                           1028 ;	SERIAL.c:81: player->line--;
   03AD 19                 1029 	dec	r1
   03AE 8E 82              1030 	mov	dpl,r6
   03B0 8F 83              1031 	mov	dph,r7
   03B2 88 F0              1032 	mov	b,r0
   03B4 E9                 1033 	mov	a,r1
   03B5 12s00r00           1034 	lcall	__gptrput
   03B8 02s0Br40           1035 	ljmp	00175$
   03BB                    1036 00174$:
                           1037 ;	SERIAL.c:89: else if(rxMsg == 's' || rxMsg == 'S'){
   03BB BA 73 02           1038 	cjne	r2,#0x73,00230$
   03BE 80 08              1039 	sjmp	00169$
   03C0                    1040 00230$:
   03C0 BA 53 02           1041 	cjne	r2,#0x53,00231$
   03C3 80 03              1042 	sjmp	00232$
   03C5                    1043 00231$:
   03C5 02s06r07           1044 	ljmp	00170$
   03C8                    1045 00232$:
   03C8                    1046 00169$:
                           1047 ;	SERIAL.c:92: if((player->sline-1) < 7)
   03C8 90s00r8F           1048 	mov	dptr,#_player
   03CB E0                 1049 	movx	a,@dptr
   03CC FB                 1050 	mov	r3,a
   03CD A3                 1051 	inc	dptr
   03CE E0                 1052 	movx	a,@dptr
   03CF FC                 1053 	mov	r4,a
   03D0 A3                 1054 	inc	dptr
   03D1 E0                 1055 	movx	a,@dptr
   03D2 FD                 1056 	mov	r5,a
   03D3 8B 82              1057 	mov	dpl,r3
   03D5 8C 83              1058 	mov	dph,r4
   03D7 8D F0              1059 	mov	b,r5
   03D9 12s00r00           1060 	lcall	__gptrget
   03DC FE                 1061 	mov	r6,a
   03DD FF                 1062 	mov	r7,a
   03DE 78 00              1063 	mov	r0,#0x00
   03E0 1F                 1064 	dec	r7
   03E1 BF FF 01           1065 	cjne	r7,#0xff,00233$
   03E4 18                 1066 	dec	r0
   03E5                    1067 00233$:
   03E5 C3                 1068 	clr	c
   03E6 EF                 1069 	mov	a,r7
   03E7 94 07              1070 	subb	a,#0x07
   03E9 E8                 1071 	mov	a,r0
   03EA 64 80              1072 	xrl	a,#0x80
   03EC 94 80              1073 	subb	a,#0x80
   03EE 40 03              1074 	jc	00234$
   03F0 02s04rDE           1075 	ljmp	00119$
   03F3                    1076 00234$:
                           1077 ;	SERIAL.c:93: logic_op = scmap[(map[player->line-1][player->col-1].schar) - 1].adds[player->sline] & (pow(2,5-player->scol));
   03F3 74 02              1078 	mov	a,#0x02
   03F5 2B                 1079 	add	a,r3
   03F6 FF                 1080 	mov	r7,a
   03F7 E4                 1081 	clr	a
   03F8 3C                 1082 	addc	a,r4
   03F9 F8                 1083 	mov	r0,a
   03FA 8D 01              1084 	mov	ar1,r5
   03FC 8F 82              1085 	mov	dpl,r7
   03FE 88 83              1086 	mov	dph,r0
   0400 89 F0              1087 	mov	b,r1
   0402 12s00r00           1088 	lcall	__gptrget
   0405 78 00              1089 	mov	r0,#0x00
   0407 24 FF              1090 	add	a,#0xff
   0409 F5*05              1091 	mov	_serialControl_sloc2_1_0,a
   040B E8                 1092 	mov	a,r0
   040C 34 FF              1093 	addc	a,#0xff
   040E F5*06              1094 	mov	(_serialControl_sloc2_1_0 + 1),a
   0410 90s00r98           1095 	mov	dptr,#_serialControl_PARM_2
   0413 E0                 1096 	movx	a,@dptr
   0414 F5*02              1097 	mov	_serialControl_sloc1_1_0,a
   0416 A3                 1098 	inc	dptr
   0417 E0                 1099 	movx	a,@dptr
   0418 F5*03              1100 	mov	(_serialControl_sloc1_1_0 + 1),a
   041A A3                 1101 	inc	dptr
   041B E0                 1102 	movx	a,@dptr
   041C F5*04              1103 	mov	(_serialControl_sloc1_1_0 + 2),a
   041E AF*05              1104 	mov	r7,_serialControl_sloc2_1_0
   0420 E5*06              1105 	mov	a,(_serialControl_sloc2_1_0 + 1)
   0422 C4                 1106 	swap	a
   0423 54 F0              1107 	anl	a,#0xf0
   0425 CF                 1108 	xch	a,r7
   0426 C4                 1109 	swap	a
   0427 CF                 1110 	xch	a,r7
   0428 6F                 1111 	xrl	a,r7
   0429 CF                 1112 	xch	a,r7
   042A 54 F0              1113 	anl	a,#0xf0
   042C CF                 1114 	xch	a,r7
   042D 6F                 1115 	xrl	a,r7
   042E F8                 1116 	mov	r0,a
   042F EF                 1117 	mov	a,r7
   0430 25*02              1118 	add	a,_serialControl_sloc1_1_0
   0432 F5*05              1119 	mov	_serialControl_sloc2_1_0,a
   0434 E8                 1120 	mov	a,r0
   0435 35*03              1121 	addc	a,(_serialControl_sloc1_1_0 + 1)
   0437 F5*06              1122 	mov	(_serialControl_sloc2_1_0 + 1),a
   0439 85*04*07           1123 	mov	(_serialControl_sloc2_1_0 + 2),(_serialControl_sloc1_1_0 + 2)
   043C 74 03              1124 	mov	a,#0x03
   043E 2B                 1125 	add	a,r3
   043F FF                 1126 	mov	r7,a
   0440 E4                 1127 	clr	a
   0441 3C                 1128 	addc	a,r4
   0442 F8                 1129 	mov	r0,a
   0443 8D 01              1130 	mov	ar1,r5
   0445 8F 82              1131 	mov	dpl,r7
   0447 88 83              1132 	mov	dph,r0
   0449 89 F0              1133 	mov	b,r1
   044B 12s00r00           1134 	lcall	__gptrget
   044E 14                 1135 	dec	a
   044F 25*05              1136 	add	a,_serialControl_sloc2_1_0
   0451 FF                 1137 	mov	r7,a
   0452 E4                 1138 	clr	a
   0453 35*06              1139 	addc	a,(_serialControl_sloc2_1_0 + 1)
   0455 F8                 1140 	mov	r0,a
   0456 A9*07              1141 	mov	r1,(_serialControl_sloc2_1_0 + 2)
   0458 8F 82              1142 	mov	dpl,r7
   045A 88 83              1143 	mov	dph,r0
   045C 89 F0              1144 	mov	b,r1
   045E 12s00r00           1145 	lcall	__gptrget
   0461 FF                 1146 	mov	r7,a
   0462 33                 1147 	rlc	a
   0463 95 E0              1148 	subb	a,acc
   0465 F8                 1149 	mov	r0,a
   0466 EF                 1150 	mov	a,r7
   0467 24 FF              1151 	add	a,#0xff
   0469 F5*05              1152 	mov	_serialControl_sloc2_1_0,a
   046B E8                 1153 	mov	a,r0
   046C 34 FF              1154 	addc	a,#0xff
   046E F5*06              1155 	mov	(_serialControl_sloc2_1_0 + 1),a
   0470 90s00r9B           1156 	mov	dptr,#_serialControl_scmap_1_1
   0473 E0                 1157 	movx	a,@dptr
   0474 F5*02              1158 	mov	_serialControl_sloc1_1_0,a
   0476 A3                 1159 	inc	dptr
   0477 E0                 1160 	movx	a,@dptr
   0478 F5*03              1161 	mov	(_serialControl_sloc1_1_0 + 1),a
   047A A3                 1162 	inc	dptr
   047B E0                 1163 	movx	a,@dptr
   047C F5*04              1164 	mov	(_serialControl_sloc1_1_0 + 2),a
   047E AF*05              1165 	mov	r7,_serialControl_sloc2_1_0
   0480 E5*06              1166 	mov	a,(_serialControl_sloc2_1_0 + 1)
   0482 C4                 1167 	swap	a
   0483 03                 1168 	rr	a
   0484 54 F8              1169 	anl	a,#0xf8
   0486 CF                 1170 	xch	a,r7
   0487 C4                 1171 	swap	a
   0488 03                 1172 	rr	a
   0489 CF                 1173 	xch	a,r7
   048A 6F                 1174 	xrl	a,r7
   048B CF                 1175 	xch	a,r7
   048C 54 F8              1176 	anl	a,#0xf8
   048E CF                 1177 	xch	a,r7
   048F 6F                 1178 	xrl	a,r7
   0490 F8                 1179 	mov	r0,a
   0491 EF                 1180 	mov	a,r7
   0492 25*02              1181 	add	a,_serialControl_sloc1_1_0
   0494 FF                 1182 	mov	r7,a
   0495 E8                 1183 	mov	a,r0
   0496 35*03              1184 	addc	a,(_serialControl_sloc1_1_0 + 1)
   0498 F8                 1185 	mov	r0,a
   0499 A9*04              1186 	mov	r1,(_serialControl_sloc1_1_0 + 2)
   049B EE                 1187 	mov	a,r6
   049C 2F                 1188 	add	a,r7
   049D F5*05              1189 	mov	_serialControl_sloc2_1_0,a
   049F E4                 1190 	clr	a
   04A0 38                 1191 	addc	a,r0
   04A1 F5*06              1192 	mov	(_serialControl_sloc2_1_0 + 1),a
   04A3 89*07              1193 	mov	(_serialControl_sloc2_1_0 + 2),r1
   04A5 74 01              1194 	mov	a,#0x01
   04A7 2B                 1195 	add	a,r3
   04A8 FE                 1196 	mov	r6,a
   04A9 E4                 1197 	clr	a
   04AA 3C                 1198 	addc	a,r4
   04AB FF                 1199 	mov	r7,a
   04AC 8D 00              1200 	mov	ar0,r5
   04AE 8E 82              1201 	mov	dpl,r6
   04B0 8F 83              1202 	mov	dph,r7
   04B2 88 F0              1203 	mov	b,r0
   04B4 12s00r00           1204 	lcall	__gptrget
   04B7 FE                 1205 	mov	r6,a
   04B8 90s00r00           1206 	mov	dptr,#_pow_PARM_2
   04BB 74 05              1207 	mov	a,#0x05
   04BD C3                 1208 	clr	c
   04BE 9E                 1209 	subb	a,r6
   04BF F0                 1210 	movx	@dptr,a
   04C0 75 82 02           1211 	mov	dpl,#0x02
   04C3 12s00r00           1212 	lcall	_pow
   04C6 AE 82              1213 	mov	r6,dpl
   04C8 85*05 82           1214 	mov	dpl,_serialControl_sloc2_1_0
   04CB 85*06 83           1215 	mov	dph,(_serialControl_sloc2_1_0 + 1)
   04CE 85*07 F0           1216 	mov	b,(_serialControl_sloc2_1_0 + 2)
   04D1 12s00r00           1217 	lcall	__gptrget
   04D4 FF                 1218 	mov	r7,a
   04D5 90s00r9E           1219 	mov	dptr,#_serialControl_logic_op_1_1
   04D8 EE                 1220 	mov	a,r6
   04D9 5F                 1221 	anl	a,r7
   04DA F0                 1222 	movx	@dptr,a
   04DB 02s05rA3           1223 	ljmp	00120$
   04DE                    1224 00119$:
                           1225 ;	SERIAL.c:95: logic_op = scmap[(map[player->line][player->col-1].schar) - 1].adds[0] & (pow(2,5-player->scol));	
   04DE 74 02              1226 	mov	a,#0x02
   04E0 2B                 1227 	add	a,r3
   04E1 FE                 1228 	mov	r6,a
   04E2 E4                 1229 	clr	a
   04E3 3C                 1230 	addc	a,r4
   04E4 FF                 1231 	mov	r7,a
   04E5 8D 00              1232 	mov	ar0,r5
   04E7 8E 82              1233 	mov	dpl,r6
   04E9 8F 83              1234 	mov	dph,r7
   04EB 88 F0              1235 	mov	b,r0
   04ED 12s00r00           1236 	lcall	__gptrget
   04F0 FE                 1237 	mov	r6,a
   04F1 90s00r98           1238 	mov	dptr,#_serialControl_PARM_2
   04F4 E0                 1239 	movx	a,@dptr
   04F5 FF                 1240 	mov	r7,a
   04F6 A3                 1241 	inc	dptr
   04F7 E0                 1242 	movx	a,@dptr
   04F8 F8                 1243 	mov	r0,a
   04F9 A3                 1244 	inc	dptr
   04FA E0                 1245 	movx	a,@dptr
   04FB F9                 1246 	mov	r1,a
   04FC EE                 1247 	mov	a,r6
   04FD C4                 1248 	swap	a
   04FE 54 F0              1249 	anl	a,#0xf0
   0500 2F                 1250 	add	a,r7
   0501 F5*05              1251 	mov	_serialControl_sloc2_1_0,a
   0503 E4                 1252 	clr	a
   0504 38                 1253 	addc	a,r0
   0505 F5*06              1254 	mov	(_serialControl_sloc2_1_0 + 1),a
   0507 89*07              1255 	mov	(_serialControl_sloc2_1_0 + 2),r1
   0509 74 03              1256 	mov	a,#0x03
   050B 2B                 1257 	add	a,r3
   050C FE                 1258 	mov	r6,a
   050D E4                 1259 	clr	a
   050E 3C                 1260 	addc	a,r4
   050F FF                 1261 	mov	r7,a
   0510 8D 00              1262 	mov	ar0,r5
   0512 8E 82              1263 	mov	dpl,r6
   0514 8F 83              1264 	mov	dph,r7
   0516 88 F0              1265 	mov	b,r0
   0518 12s00r00           1266 	lcall	__gptrget
   051B 14                 1267 	dec	a
   051C 25*05              1268 	add	a,_serialControl_sloc2_1_0
   051E FE                 1269 	mov	r6,a
   051F E4                 1270 	clr	a
   0520 35*06              1271 	addc	a,(_serialControl_sloc2_1_0 + 1)
   0522 FF                 1272 	mov	r7,a
   0523 A8*07              1273 	mov	r0,(_serialControl_sloc2_1_0 + 2)
   0525 8E 82              1274 	mov	dpl,r6
   0527 8F 83              1275 	mov	dph,r7
   0529 88 F0              1276 	mov	b,r0
   052B 12s00r00           1277 	lcall	__gptrget
   052E FE                 1278 	mov	r6,a
   052F 33                 1279 	rlc	a
   0530 95 E0              1280 	subb	a,acc
   0532 FF                 1281 	mov	r7,a
   0533 EE                 1282 	mov	a,r6
   0534 24 FF              1283 	add	a,#0xff
   0536 F5*05              1284 	mov	_serialControl_sloc2_1_0,a
   0538 EF                 1285 	mov	a,r7
   0539 34 FF              1286 	addc	a,#0xff
   053B F5*06              1287 	mov	(_serialControl_sloc2_1_0 + 1),a
   053D 90s00r9B           1288 	mov	dptr,#_serialControl_scmap_1_1
   0540 E0                 1289 	movx	a,@dptr
   0541 F5*02              1290 	mov	_serialControl_sloc1_1_0,a
   0543 A3                 1291 	inc	dptr
   0544 E0                 1292 	movx	a,@dptr
   0545 F5*03              1293 	mov	(_serialControl_sloc1_1_0 + 1),a
   0547 A3                 1294 	inc	dptr
   0548 E0                 1295 	movx	a,@dptr
   0549 F5*04              1296 	mov	(_serialControl_sloc1_1_0 + 2),a
   054B AF*05              1297 	mov	r7,_serialControl_sloc2_1_0
   054D E5*06              1298 	mov	a,(_serialControl_sloc2_1_0 + 1)
   054F C4                 1299 	swap	a
   0550 03                 1300 	rr	a
   0551 54 F8              1301 	anl	a,#0xf8
   0553 CF                 1302 	xch	a,r7
   0554 C4                 1303 	swap	a
   0555 03                 1304 	rr	a
   0556 CF                 1305 	xch	a,r7
   0557 6F                 1306 	xrl	a,r7
   0558 CF                 1307 	xch	a,r7
   0559 54 F8              1308 	anl	a,#0xf8
   055B CF                 1309 	xch	a,r7
   055C 6F                 1310 	xrl	a,r7
   055D FE                 1311 	mov	r6,a
   055E EF                 1312 	mov	a,r7
   055F 25*02              1313 	add	a,_serialControl_sloc1_1_0
   0561 FF                 1314 	mov	r7,a
   0562 EE                 1315 	mov	a,r6
   0563 35*03              1316 	addc	a,(_serialControl_sloc1_1_0 + 1)
   0565 FE                 1317 	mov	r6,a
   0566 A8*04              1318 	mov	r0,(_serialControl_sloc1_1_0 + 2)
   0568 0B                 1319 	inc	r3
   0569 BB 00 01           1320 	cjne	r3,#0x00,00235$
   056C 0C                 1321 	inc	r4
   056D                    1322 00235$:
   056D 8B 82              1323 	mov	dpl,r3
   056F 8C 83              1324 	mov	dph,r4
   0571 8D F0              1325 	mov	b,r5
   0573 12s00r00           1326 	lcall	__gptrget
   0576 FB                 1327 	mov	r3,a
   0577 90s00r00           1328 	mov	dptr,#_pow_PARM_2
   057A 74 05              1329 	mov	a,#0x05
   057C C3                 1330 	clr	c
   057D 9B                 1331 	subb	a,r3
   057E F0                 1332 	movx	@dptr,a
   057F 75 82 02           1333 	mov	dpl,#0x02
   0582 C0 06              1334 	push	ar6
   0584 C0 07              1335 	push	ar7
   0586 C0 00              1336 	push	ar0
   0588 12s00r00           1337 	lcall	_pow
   058B AB 82              1338 	mov	r3,dpl
   058D D0 00              1339 	pop	ar0
   058F D0 07              1340 	pop	ar7
   0591 D0 06              1341 	pop	ar6
   0593 8F 82              1342 	mov	dpl,r7
   0595 8E 83              1343 	mov	dph,r6
   0597 88 F0              1344 	mov	b,r0
   0599 12s00r00           1345 	lcall	__gptrget
   059C FF                 1346 	mov	r7,a
   059D 90s00r9E           1347 	mov	dptr,#_serialControl_logic_op_1_1
   05A0 EB                 1348 	mov	a,r3
   05A1 5F                 1349 	anl	a,r7
   05A2 F0                 1350 	movx	@dptr,a
   05A3                    1351 00120$:
                           1352 ;	SERIAL.c:100: if(logic_op == 0){
   05A3 90s00r9E           1353 	mov	dptr,#_serialControl_logic_op_1_1
   05A6 E0                 1354 	movx	a,@dptr
   05A7 FB                 1355 	mov	r3,a
   05A8 60 03              1356 	jz	00236$
   05AA 02s0Br40           1357 	ljmp	00175$
   05AD                    1358 00236$:
                           1359 ;	SERIAL.c:101: if(player->sline != 8)
   05AD 90s00r8F           1360 	mov	dptr,#_player
   05B0 E0                 1361 	movx	a,@dptr
   05B1 FB                 1362 	mov	r3,a
   05B2 A3                 1363 	inc	dptr
   05B3 E0                 1364 	movx	a,@dptr
   05B4 FC                 1365 	mov	r4,a
   05B5 A3                 1366 	inc	dptr
   05B6 E0                 1367 	movx	a,@dptr
   05B7 FD                 1368 	mov	r5,a
   05B8 8B 82              1369 	mov	dpl,r3
   05BA 8C 83              1370 	mov	dph,r4
   05BC 8D F0              1371 	mov	b,r5
   05BE 12s00r00           1372 	lcall	__gptrget
   05C1 FE                 1373 	mov	r6,a
   05C2 BE 08 02           1374 	cjne	r6,#0x08,00237$
   05C5 80 0E              1375 	sjmp	00124$
   05C7                    1376 00237$:
                           1377 ;	SERIAL.c:102: player->sline++;
   05C7 0E                 1378 	inc	r6
   05C8 8B 82              1379 	mov	dpl,r3
   05CA 8C 83              1380 	mov	dph,r4
   05CC 8D F0              1381 	mov	b,r5
   05CE EE                 1382 	mov	a,r6
   05CF 12s00r00           1383 	lcall	__gptrput
   05D2 02s0Br40           1384 	ljmp	00175$
   05D5                    1385 00124$:
                           1386 ;	SERIAL.c:104: if(player->line != 4){
   05D5 74 02              1387 	mov	a,#0x02
   05D7 2B                 1388 	add	a,r3
   05D8 FE                 1389 	mov	r6,a
   05D9 E4                 1390 	clr	a
   05DA 3C                 1391 	addc	a,r4
   05DB FF                 1392 	mov	r7,a
   05DC 8D 00              1393 	mov	ar0,r5
   05DE 8E 82              1394 	mov	dpl,r6
   05E0 8F 83              1395 	mov	dph,r7
   05E2 88 F0              1396 	mov	b,r0
   05E4 12s00r00           1397 	lcall	__gptrget
   05E7 F9                 1398 	mov	r1,a
   05E8 B9 04 03           1399 	cjne	r1,#0x04,00238$
   05EB 02s0Br40           1400 	ljmp	00175$
   05EE                    1401 00238$:
                           1402 ;	SERIAL.c:105: player->sline = 1;
   05EE 8B 82              1403 	mov	dpl,r3
   05F0 8C 83              1404 	mov	dph,r4
   05F2 8D F0              1405 	mov	b,r5
   05F4 74 01              1406 	mov	a,#0x01
   05F6 12s00r00           1407 	lcall	__gptrput
                           1408 ;	SERIAL.c:106: player->line++;
   05F9 09                 1409 	inc	r1
   05FA 8E 82              1410 	mov	dpl,r6
   05FC 8F 83              1411 	mov	dph,r7
   05FE 88 F0              1412 	mov	b,r0
   0600 E9                 1413 	mov	a,r1
   0601 12s00r00           1414 	lcall	__gptrput
   0604 02s0Br40           1415 	ljmp	00175$
   0607                    1416 00170$:
                           1417 ;	SERIAL.c:115: else if(rxMsg == 'd' || rxMsg == 'D'){
   0607 BA 64 02           1418 	cjne	r2,#0x64,00239$
   060A 80 08              1419 	sjmp	00165$
   060C                    1420 00239$:
   060C BA 44 02           1421 	cjne	r2,#0x44,00240$
   060F 80 03              1422 	sjmp	00241$
   0611                    1423 00240$:
   0611 02s08rA4           1424 	ljmp	00166$
   0614                    1425 00241$:
   0614                    1426 00165$:
                           1427 ;	SERIAL.c:118: if((player->scol+1)<6)
   0614 90s00r8F           1428 	mov	dptr,#_player
   0617 E0                 1429 	movx	a,@dptr
   0618 FB                 1430 	mov	r3,a
   0619 A3                 1431 	inc	dptr
   061A E0                 1432 	movx	a,@dptr
   061B FC                 1433 	mov	r4,a
   061C A3                 1434 	inc	dptr
   061D E0                 1435 	movx	a,@dptr
   061E FD                 1436 	mov	r5,a
   061F 74 01              1437 	mov	a,#0x01
   0621 2B                 1438 	add	a,r3
   0622 FE                 1439 	mov	r6,a
   0623 E4                 1440 	clr	a
   0624 3C                 1441 	addc	a,r4
   0625 FF                 1442 	mov	r7,a
   0626 8D 00              1443 	mov	ar0,r5
   0628 8E 82              1444 	mov	dpl,r6
   062A 8F 83              1445 	mov	dph,r7
   062C 88 F0              1446 	mov	b,r0
   062E 12s00r00           1447 	lcall	__gptrget
   0631 FE                 1448 	mov	r6,a
   0632 FF                 1449 	mov	r7,a
   0633 78 00              1450 	mov	r0,#0x00
   0635 0F                 1451 	inc	r7
   0636 BF 00 01           1452 	cjne	r7,#0x00,00242$
   0639 08                 1453 	inc	r0
   063A                    1454 00242$:
   063A C3                 1455 	clr	c
   063B EF                 1456 	mov	a,r7
   063C 94 06              1457 	subb	a,#0x06
   063E E8                 1458 	mov	a,r0
   063F 64 80              1459 	xrl	a,#0x80
   0641 94 80              1460 	subb	a,#0x80
   0643 40 03              1461 	jc	00243$
   0645 02s07r2E           1462 	ljmp	00136$
   0648                    1463 00243$:
                           1464 ;	SERIAL.c:119: logic_op = scmap[(map[player->line-1][player->col-1].schar) - 1].adds[player->sline-1] & (pow(2,5-(player->scol+1)));
   0648 74 02              1465 	mov	a,#0x02
   064A 2B                 1466 	add	a,r3
   064B FF                 1467 	mov	r7,a
   064C E4                 1468 	clr	a
   064D 3C                 1469 	addc	a,r4
   064E F8                 1470 	mov	r0,a
   064F 8D 01              1471 	mov	ar1,r5
   0651 8F 82              1472 	mov	dpl,r7
   0653 88 83              1473 	mov	dph,r0
   0655 89 F0              1474 	mov	b,r1
   0657 12s00r00           1475 	lcall	__gptrget
   065A 78 00              1476 	mov	r0,#0x00
   065C 24 FF              1477 	add	a,#0xff
   065E F5*05              1478 	mov	_serialControl_sloc2_1_0,a
   0660 E8                 1479 	mov	a,r0
   0661 34 FF              1480 	addc	a,#0xff
   0663 F5*06              1481 	mov	(_serialControl_sloc2_1_0 + 1),a
   0665 90s00r98           1482 	mov	dptr,#_serialControl_PARM_2
   0668 E0                 1483 	movx	a,@dptr
   0669 F5*02              1484 	mov	_serialControl_sloc1_1_0,a
   066B A3                 1485 	inc	dptr
   066C E0                 1486 	movx	a,@dptr
   066D F5*03              1487 	mov	(_serialControl_sloc1_1_0 + 1),a
   066F A3                 1488 	inc	dptr
   0670 E0                 1489 	movx	a,@dptr
   0671 F5*04              1490 	mov	(_serialControl_sloc1_1_0 + 2),a
   0673 AF*05              1491 	mov	r7,_serialControl_sloc2_1_0
   0675 E5*06              1492 	mov	a,(_serialControl_sloc2_1_0 + 1)
   0677 C4                 1493 	swap	a
   0678 54 F0              1494 	anl	a,#0xf0
   067A CF                 1495 	xch	a,r7
   067B C4                 1496 	swap	a
   067C CF                 1497 	xch	a,r7
   067D 6F                 1498 	xrl	a,r7
   067E CF                 1499 	xch	a,r7
   067F 54 F0              1500 	anl	a,#0xf0
   0681 CF                 1501 	xch	a,r7
   0682 6F                 1502 	xrl	a,r7
   0683 F8                 1503 	mov	r0,a
   0684 EF                 1504 	mov	a,r7
   0685 25*02              1505 	add	a,_serialControl_sloc1_1_0
   0687 F5*05              1506 	mov	_serialControl_sloc2_1_0,a
   0689 E8                 1507 	mov	a,r0
   068A 35*03              1508 	addc	a,(_serialControl_sloc1_1_0 + 1)
   068C F5*06              1509 	mov	(_serialControl_sloc2_1_0 + 1),a
   068E 85*04*07           1510 	mov	(_serialControl_sloc2_1_0 + 2),(_serialControl_sloc1_1_0 + 2)
   0691 74 03              1511 	mov	a,#0x03
   0693 2B                 1512 	add	a,r3
   0694 FF                 1513 	mov	r7,a
   0695 E4                 1514 	clr	a
   0696 3C                 1515 	addc	a,r4
   0697 F8                 1516 	mov	r0,a
   0698 8D 01              1517 	mov	ar1,r5
   069A 8F 82              1518 	mov	dpl,r7
   069C 88 83              1519 	mov	dph,r0
   069E 89 F0              1520 	mov	b,r1
   06A0 12s00r00           1521 	lcall	__gptrget
   06A3 14                 1522 	dec	a
   06A4 25*05              1523 	add	a,_serialControl_sloc2_1_0
   06A6 FF                 1524 	mov	r7,a
   06A7 E4                 1525 	clr	a
   06A8 35*06              1526 	addc	a,(_serialControl_sloc2_1_0 + 1)
   06AA F8                 1527 	mov	r0,a
   06AB A9*07              1528 	mov	r1,(_serialControl_sloc2_1_0 + 2)
   06AD 8F 82              1529 	mov	dpl,r7
   06AF 88 83              1530 	mov	dph,r0
   06B1 89 F0              1531 	mov	b,r1
   06B3 12s00r00           1532 	lcall	__gptrget
   06B6 FF                 1533 	mov	r7,a
   06B7 33                 1534 	rlc	a
   06B8 95 E0              1535 	subb	a,acc
   06BA F8                 1536 	mov	r0,a
   06BB EF                 1537 	mov	a,r7
   06BC 24 FF              1538 	add	a,#0xff
   06BE F5*05              1539 	mov	_serialControl_sloc2_1_0,a
   06C0 E8                 1540 	mov	a,r0
   06C1 34 FF              1541 	addc	a,#0xff
   06C3 F5*06              1542 	mov	(_serialControl_sloc2_1_0 + 1),a
   06C5 90s00r9B           1543 	mov	dptr,#_serialControl_scmap_1_1
   06C8 E0                 1544 	movx	a,@dptr
   06C9 F5*02              1545 	mov	_serialControl_sloc1_1_0,a
   06CB A3                 1546 	inc	dptr
   06CC E0                 1547 	movx	a,@dptr
   06CD F5*03              1548 	mov	(_serialControl_sloc1_1_0 + 1),a
   06CF A3                 1549 	inc	dptr
   06D0 E0                 1550 	movx	a,@dptr
   06D1 F5*04              1551 	mov	(_serialControl_sloc1_1_0 + 2),a
   06D3 AF*05              1552 	mov	r7,_serialControl_sloc2_1_0
   06D5 E5*06              1553 	mov	a,(_serialControl_sloc2_1_0 + 1)
   06D7 C4                 1554 	swap	a
   06D8 03                 1555 	rr	a
   06D9 54 F8              1556 	anl	a,#0xf8
   06DB CF                 1557 	xch	a,r7
   06DC C4                 1558 	swap	a
   06DD 03                 1559 	rr	a
   06DE CF                 1560 	xch	a,r7
   06DF 6F                 1561 	xrl	a,r7
   06E0 CF                 1562 	xch	a,r7
   06E1 54 F8              1563 	anl	a,#0xf8
   06E3 CF                 1564 	xch	a,r7
   06E4 6F                 1565 	xrl	a,r7
   06E5 F8                 1566 	mov	r0,a
   06E6 EF                 1567 	mov	a,r7
   06E7 25*02              1568 	add	a,_serialControl_sloc1_1_0
   06E9 F5*05              1569 	mov	_serialControl_sloc2_1_0,a
   06EB E8                 1570 	mov	a,r0
   06EC 35*03              1571 	addc	a,(_serialControl_sloc1_1_0 + 1)
   06EE F5*06              1572 	mov	(_serialControl_sloc2_1_0 + 1),a
   06F0 85*04*07           1573 	mov	(_serialControl_sloc2_1_0 + 2),(_serialControl_sloc1_1_0 + 2)
   06F3 8B 82              1574 	mov	dpl,r3
   06F5 8C 83              1575 	mov	dph,r4
   06F7 8D F0              1576 	mov	b,r5
   06F9 12s00r00           1577 	lcall	__gptrget
   06FC 14                 1578 	dec	a
   06FD 25*05              1579 	add	a,_serialControl_sloc2_1_0
   06FF F5*05              1580 	mov	_serialControl_sloc2_1_0,a
   0701 E4                 1581 	clr	a
   0702 35*06              1582 	addc	a,(_serialControl_sloc2_1_0 + 1)
   0704 F5*06              1583 	mov	(_serialControl_sloc2_1_0 + 1),a
   0706 EE                 1584 	mov	a,r6
   0707 04                 1585 	inc	a
   0708 90s00r00           1586 	mov	dptr,#_pow_PARM_2
   070B D3                 1587 	setb	c
   070C 94 05              1588 	subb	a,#0x05
   070E F4                 1589 	cpl	a
   070F F0                 1590 	movx	@dptr,a
   0710 75 82 02           1591 	mov	dpl,#0x02
   0713 12s00r00           1592 	lcall	_pow
   0716 AF 82              1593 	mov	r7,dpl
   0718 85*05 82           1594 	mov	dpl,_serialControl_sloc2_1_0
   071B 85*06 83           1595 	mov	dph,(_serialControl_sloc2_1_0 + 1)
   071E 85*07 F0           1596 	mov	b,(_serialControl_sloc2_1_0 + 2)
   0721 12s00r00           1597 	lcall	__gptrget
   0724 F8                 1598 	mov	r0,a
   0725 90s00r9E           1599 	mov	dptr,#_serialControl_logic_op_1_1
   0728 EF                 1600 	mov	a,r7
   0729 58                 1601 	anl	a,r0
   072A F0                 1602 	movx	@dptr,a
   072B 02s08r39           1603 	ljmp	00137$
   072E                    1604 00136$:
                           1605 ;	SERIAL.c:120: else if(player->scol==5 && player->col <16)
   072E E4                 1606 	clr	a
   072F BE 05 01           1607 	cjne	r6,#0x05,00244$
   0732 04                 1608 	inc	a
   0733                    1609 00244$:
   0733 FE                 1610 	mov	r6,a
   0734 70 03              1611 	jnz	00246$
   0736 02s08r1E           1612 	ljmp	00132$
   0739                    1613 00246$:
   0739 74 03              1614 	mov	a,#0x03
   073B 2B                 1615 	add	a,r3
   073C FF                 1616 	mov	r7,a
   073D E4                 1617 	clr	a
   073E 3C                 1618 	addc	a,r4
   073F F8                 1619 	mov	r0,a
   0740 8D 01              1620 	mov	ar1,r5
   0742 8F 82              1621 	mov	dpl,r7
   0744 88 83              1622 	mov	dph,r0
   0746 89 F0              1623 	mov	b,r1
   0748 12s00r00           1624 	lcall	__gptrget
   074B F5*05              1625 	mov	_serialControl_sloc2_1_0,a
   074D C3                 1626 	clr	c
   074E 94 10              1627 	subb	a,#0x10
   0750 40 03              1628 	jc	00247$
   0752 02s08r1E           1629 	ljmp	00132$
   0755                    1630 00247$:
                           1631 ;	SERIAL.c:121: logic_op = scmap[(map[player->line-1][player->col].schar) - 1].adds[player->sline-1] & (pow(2,5-(1)));
   0755 74 02              1632 	mov	a,#0x02
   0757 2B                 1633 	add	a,r3
   0758 F8                 1634 	mov	r0,a
   0759 E4                 1635 	clr	a
   075A 3C                 1636 	addc	a,r4
   075B F9                 1637 	mov	r1,a
   075C 8D 07              1638 	mov	ar7,r5
   075E 88 82              1639 	mov	dpl,r0
   0760 89 83              1640 	mov	dph,r1
   0762 8F F0              1641 	mov	b,r7
   0764 12s00r00           1642 	lcall	__gptrget
   0767 7F 00              1643 	mov	r7,#0x00
   0769 24 FF              1644 	add	a,#0xff
   076B F5*02              1645 	mov	_serialControl_sloc1_1_0,a
   076D EF                 1646 	mov	a,r7
   076E 34 FF              1647 	addc	a,#0xff
   0770 F5*03              1648 	mov	(_serialControl_sloc1_1_0 + 1),a
   0772 90s00r98           1649 	mov	dptr,#_serialControl_PARM_2
   0775 E0                 1650 	movx	a,@dptr
   0776 F5*08              1651 	mov	_serialControl_sloc3_1_0,a
   0778 A3                 1652 	inc	dptr
   0779 E0                 1653 	movx	a,@dptr
   077A F5*09              1654 	mov	(_serialControl_sloc3_1_0 + 1),a
   077C A3                 1655 	inc	dptr
   077D E0                 1656 	movx	a,@dptr
   077E F5*0A              1657 	mov	(_serialControl_sloc3_1_0 + 2),a
   0780 AF*02              1658 	mov	r7,_serialControl_sloc1_1_0
   0782 E5*03              1659 	mov	a,(_serialControl_sloc1_1_0 + 1)
   0784 C4                 1660 	swap	a
   0785 54 F0              1661 	anl	a,#0xf0
   0787 CF                 1662 	xch	a,r7
   0788 C4                 1663 	swap	a
   0789 CF                 1664 	xch	a,r7
   078A 6F                 1665 	xrl	a,r7
   078B CF                 1666 	xch	a,r7
   078C 54 F0              1667 	anl	a,#0xf0
   078E CF                 1668 	xch	a,r7
   078F 6F                 1669 	xrl	a,r7
   0790 F8                 1670 	mov	r0,a
   0791 EF                 1671 	mov	a,r7
   0792 25*08              1672 	add	a,_serialControl_sloc3_1_0
   0794 FF                 1673 	mov	r7,a
   0795 E8                 1674 	mov	a,r0
   0796 35*09              1675 	addc	a,(_serialControl_sloc3_1_0 + 1)
   0798 F8                 1676 	mov	r0,a
   0799 A9*0A              1677 	mov	r1,(_serialControl_sloc3_1_0 + 2)
   079B E5*05              1678 	mov	a,_serialControl_sloc2_1_0
   079D 2F                 1679 	add	a,r7
   079E FF                 1680 	mov	r7,a
   079F E4                 1681 	clr	a
   07A0 38                 1682 	addc	a,r0
   07A1 F8                 1683 	mov	r0,a
   07A2 8F 82              1684 	mov	dpl,r7
   07A4 88 83              1685 	mov	dph,r0
   07A6 89 F0              1686 	mov	b,r1
   07A8 12s00r00           1687 	lcall	__gptrget
   07AB FF                 1688 	mov	r7,a
   07AC 33                 1689 	rlc	a
   07AD 95 E0              1690 	subb	a,acc
   07AF F8                 1691 	mov	r0,a
   07B0 EF                 1692 	mov	a,r7
   07B1 24 FF              1693 	add	a,#0xff
   07B3 F5*08              1694 	mov	_serialControl_sloc3_1_0,a
   07B5 E8                 1695 	mov	a,r0
   07B6 34 FF              1696 	addc	a,#0xff
   07B8 F5*09              1697 	mov	(_serialControl_sloc3_1_0 + 1),a
   07BA 90s00r9B           1698 	mov	dptr,#_serialControl_scmap_1_1
   07BD E0                 1699 	movx	a,@dptr
   07BE F5*05              1700 	mov	_serialControl_sloc2_1_0,a
   07C0 A3                 1701 	inc	dptr
   07C1 E0                 1702 	movx	a,@dptr
   07C2 F5*06              1703 	mov	(_serialControl_sloc2_1_0 + 1),a
   07C4 A3                 1704 	inc	dptr
   07C5 E0                 1705 	movx	a,@dptr
   07C6 F5*07              1706 	mov	(_serialControl_sloc2_1_0 + 2),a
   07C8 AF*08              1707 	mov	r7,_serialControl_sloc3_1_0
   07CA E5*09              1708 	mov	a,(_serialControl_sloc3_1_0 + 1)
   07CC C4                 1709 	swap	a
   07CD 03                 1710 	rr	a
   07CE 54 F8              1711 	anl	a,#0xf8
   07D0 CF                 1712 	xch	a,r7
   07D1 C4                 1713 	swap	a
   07D2 03                 1714 	rr	a
   07D3 CF                 1715 	xch	a,r7
   07D4 6F                 1716 	xrl	a,r7
   07D5 CF                 1717 	xch	a,r7
   07D6 54 F8              1718 	anl	a,#0xf8
   07D8 CF                 1719 	xch	a,r7
   07D9 6F                 1720 	xrl	a,r7
   07DA F8                 1721 	mov	r0,a
   07DB EF                 1722 	mov	a,r7
   07DC 25*05              1723 	add	a,_serialControl_sloc2_1_0
   07DE F5*08              1724 	mov	_serialControl_sloc3_1_0,a
   07E0 E8                 1725 	mov	a,r0
   07E1 35*06              1726 	addc	a,(_serialControl_sloc2_1_0 + 1)
   07E3 F5*09              1727 	mov	(_serialControl_sloc3_1_0 + 1),a
   07E5 85*07*0A           1728 	mov	(_serialControl_sloc3_1_0 + 2),(_serialControl_sloc2_1_0 + 2)
   07E8 8B 82              1729 	mov	dpl,r3
   07EA 8C 83              1730 	mov	dph,r4
   07EC 8D F0              1731 	mov	b,r5
   07EE 12s00r00           1732 	lcall	__gptrget
   07F1 14                 1733 	dec	a
   07F2 25*08              1734 	add	a,_serialControl_sloc3_1_0
   07F4 F5*08              1735 	mov	_serialControl_sloc3_1_0,a
   07F6 E4                 1736 	clr	a
   07F7 35*09              1737 	addc	a,(_serialControl_sloc3_1_0 + 1)
   07F9 F5*09              1738 	mov	(_serialControl_sloc3_1_0 + 1),a
   07FB 90s00r00           1739 	mov	dptr,#_pow_PARM_2
   07FE 74 04              1740 	mov	a,#0x04
   0800 F0                 1741 	movx	@dptr,a
   0801 75 82 02           1742 	mov	dpl,#0x02
   0804 12s00r00           1743 	lcall	_pow
   0807 AF 82              1744 	mov	r7,dpl
   0809 85*08 82           1745 	mov	dpl,_serialControl_sloc3_1_0
   080C 85*09 83           1746 	mov	dph,(_serialControl_sloc3_1_0 + 1)
   080F 85*0A F0           1747 	mov	b,(_serialControl_sloc3_1_0 + 2)
   0812 12s00r00           1748 	lcall	__gptrget
   0815 F8                 1749 	mov	r0,a
   0816 90s00r9E           1750 	mov	dptr,#_serialControl_logic_op_1_1
   0819 EF                 1751 	mov	a,r7
   081A 58                 1752 	anl	a,r0
   081B F0                 1753 	movx	@dptr,a
   081C 80 1B              1754 	sjmp	00137$
   081E                    1755 00132$:
                           1756 ;	SERIAL.c:122: else if(player->scol==5 && player->col ==16)
   081E EE                 1757 	mov	a,r6
   081F 60 18              1758 	jz	00137$
   0821 74 03              1759 	mov	a,#0x03
   0823 2B                 1760 	add	a,r3
   0824 FB                 1761 	mov	r3,a
   0825 E4                 1762 	clr	a
   0826 3C                 1763 	addc	a,r4
   0827 FC                 1764 	mov	r4,a
   0828 8B 82              1765 	mov	dpl,r3
   082A 8C 83              1766 	mov	dph,r4
   082C 8D F0              1767 	mov	b,r5
   082E 12s00r00           1768 	lcall	__gptrget
   0831 FB                 1769 	mov	r3,a
   0832 BB 10 04           1770 	cjne	r3,#0x10,00137$
                           1771 ;	SERIAL.c:123: return 0;
   0835 75 82 00           1772 	mov	dpl,#0x00
   0838 22                 1773 	ret
   0839                    1774 00137$:
                           1775 ;	SERIAL.c:126: if(logic_op == 0){
   0839 90s00r9E           1776 	mov	dptr,#_serialControl_logic_op_1_1
   083C E0                 1777 	movx	a,@dptr
   083D FB                 1778 	mov	r3,a
   083E 60 03              1779 	jz	00251$
   0840 02s0Br40           1780 	ljmp	00175$
   0843                    1781 00251$:
                           1782 ;	SERIAL.c:128: if(player->scol != 5)
   0843 90s00r8F           1783 	mov	dptr,#_player
   0846 E0                 1784 	movx	a,@dptr
   0847 FB                 1785 	mov	r3,a
   0848 A3                 1786 	inc	dptr
   0849 E0                 1787 	movx	a,@dptr
   084A FC                 1788 	mov	r4,a
   084B A3                 1789 	inc	dptr
   084C E0                 1790 	movx	a,@dptr
   084D FD                 1791 	mov	r5,a
   084E 74 01              1792 	mov	a,#0x01
   0850 2B                 1793 	add	a,r3
   0851 FE                 1794 	mov	r6,a
   0852 E4                 1795 	clr	a
   0853 3C                 1796 	addc	a,r4
   0854 FF                 1797 	mov	r7,a
   0855 8D 00              1798 	mov	ar0,r5
   0857 8E 82              1799 	mov	dpl,r6
   0859 8F 83              1800 	mov	dph,r7
   085B 88 F0              1801 	mov	b,r0
   085D 12s00r00           1802 	lcall	__gptrget
   0860 F9                 1803 	mov	r1,a
   0861 B9 05 02           1804 	cjne	r1,#0x05,00252$
   0864 80 0E              1805 	sjmp	00141$
   0866                    1806 00252$:
                           1807 ;	SERIAL.c:129: player->scol++;
   0866 09                 1808 	inc	r1
   0867 8E 82              1809 	mov	dpl,r6
   0869 8F 83              1810 	mov	dph,r7
   086B 88 F0              1811 	mov	b,r0
   086D E9                 1812 	mov	a,r1
   086E 12s00r00           1813 	lcall	__gptrput
   0871 02s0Br40           1814 	ljmp	00175$
   0874                    1815 00141$:
                           1816 ;	SERIAL.c:131: if(player->col != 16){
   0874 74 03              1817 	mov	a,#0x03
   0876 2B                 1818 	add	a,r3
   0877 FB                 1819 	mov	r3,a
   0878 E4                 1820 	clr	a
   0879 3C                 1821 	addc	a,r4
   087A FC                 1822 	mov	r4,a
   087B 8B 82              1823 	mov	dpl,r3
   087D 8C 83              1824 	mov	dph,r4
   087F 8D F0              1825 	mov	b,r5
   0881 12s00r00           1826 	lcall	__gptrget
   0884 F9                 1827 	mov	r1,a
   0885 B9 10 03           1828 	cjne	r1,#0x10,00253$
   0888 02s0Br40           1829 	ljmp	00175$
   088B                    1830 00253$:
                           1831 ;	SERIAL.c:132: player->scol = 1;
   088B 8E 82              1832 	mov	dpl,r6
   088D 8F 83              1833 	mov	dph,r7
   088F 88 F0              1834 	mov	b,r0
   0891 74 01              1835 	mov	a,#0x01
   0893 12s00r00           1836 	lcall	__gptrput
                           1837 ;	SERIAL.c:133: player->col++;
   0896 09                 1838 	inc	r1
   0897 8B 82              1839 	mov	dpl,r3
   0899 8C 83              1840 	mov	dph,r4
   089B 8D F0              1841 	mov	b,r5
   089D E9                 1842 	mov	a,r1
   089E 12s00r00           1843 	lcall	__gptrput
   08A1 02s0Br40           1844 	ljmp	00175$
   08A4                    1845 00166$:
                           1846 ;	SERIAL.c:141: else if(rxMsg == 'a' || rxMsg == 'A'){
   08A4 BA 61 02           1847 	cjne	r2,#0x61,00254$
   08A7 80 08              1848 	sjmp	00162$
   08A9                    1849 00254$:
   08A9 BA 41 02           1850 	cjne	r2,#0x41,00255$
   08AC 80 03              1851 	sjmp	00256$
   08AE                    1852 00255$:
   08AE 02s0Br40           1853 	ljmp	00175$
   08B1                    1854 00256$:
   08B1                    1855 00162$:
                           1856 ;	SERIAL.c:144: if((player->scol-2)>-1)
   08B1 90s00r8F           1857 	mov	dptr,#_player
   08B4 E0                 1858 	movx	a,@dptr
   08B5 FA                 1859 	mov	r2,a
   08B6 A3                 1860 	inc	dptr
   08B7 E0                 1861 	movx	a,@dptr
   08B8 FB                 1862 	mov	r3,a
   08B9 A3                 1863 	inc	dptr
   08BA E0                 1864 	movx	a,@dptr
   08BB FC                 1865 	mov	r4,a
   08BC 74 01              1866 	mov	a,#0x01
   08BE 2A                 1867 	add	a,r2
   08BF FD                 1868 	mov	r5,a
   08C0 E4                 1869 	clr	a
   08C1 3B                 1870 	addc	a,r3
   08C2 FE                 1871 	mov	r6,a
   08C3 8C 07              1872 	mov	ar7,r4
   08C5 8D 82              1873 	mov	dpl,r5
   08C7 8E 83              1874 	mov	dph,r6
   08C9 8F F0              1875 	mov	b,r7
   08CB 12s00r00           1876 	lcall	__gptrget
   08CE FD                 1877 	mov	r5,a
   08CF 7F 00              1878 	mov	r7,#0x00
   08D1 24 FE              1879 	add	a,#0xfe
   08D3 FE                 1880 	mov	r6,a
   08D4 EF                 1881 	mov	a,r7
   08D5 34 FF              1882 	addc	a,#0xff
   08D7 FF                 1883 	mov	r7,a
   08D8 C3                 1884 	clr	c
   08D9 74 FF              1885 	mov	a,#0xFF
   08DB 9E                 1886 	subb	a,r6
   08DC 74 7F              1887 	mov	a,#(0xFF ^ 0x80)
   08DE 8F F0              1888 	mov	b,r7
   08E0 63 F0 80           1889 	xrl	b,#0x80
   08E3 95 F0              1890 	subb	a,b
   08E5 40 03              1891 	jc	00257$
   08E7 02s09rD2           1892 	ljmp	00153$
   08EA                    1893 00257$:
                           1894 ;	SERIAL.c:145: logic_op = scmap[(map[player->line-1][player->col-1].schar) - 1].adds[player->sline-1] & (pow(2,5-(player->scol-1)));
   08EA 74 02              1895 	mov	a,#0x02
   08EC 2A                 1896 	add	a,r2
   08ED FE                 1897 	mov	r6,a
   08EE E4                 1898 	clr	a
   08EF 3B                 1899 	addc	a,r3
   08F0 FF                 1900 	mov	r7,a
   08F1 8C 00              1901 	mov	ar0,r4
   08F3 8E 82              1902 	mov	dpl,r6
   08F5 8F 83              1903 	mov	dph,r7
   08F7 88 F0              1904 	mov	b,r0
   08F9 12s00r00           1905 	lcall	__gptrget
   08FC 7F 00              1906 	mov	r7,#0x00
   08FE 24 FF              1907 	add	a,#0xff
   0900 F5*08              1908 	mov	_serialControl_sloc3_1_0,a
   0902 EF                 1909 	mov	a,r7
   0903 34 FF              1910 	addc	a,#0xff
   0905 F5*09              1911 	mov	(_serialControl_sloc3_1_0 + 1),a
   0907 90s00r98           1912 	mov	dptr,#_serialControl_PARM_2
   090A E0                 1913 	movx	a,@dptr
   090B F5*05              1914 	mov	_serialControl_sloc2_1_0,a
   090D A3                 1915 	inc	dptr
   090E E0                 1916 	movx	a,@dptr
   090F F5*06              1917 	mov	(_serialControl_sloc2_1_0 + 1),a
   0911 A3                 1918 	inc	dptr
   0912 E0                 1919 	movx	a,@dptr
   0913 F5*07              1920 	mov	(_serialControl_sloc2_1_0 + 2),a
   0915 AF*08              1921 	mov	r7,_serialControl_sloc3_1_0
   0917 E5*09              1922 	mov	a,(_serialControl_sloc3_1_0 + 1)
   0919 C4                 1923 	swap	a
   091A 54 F0              1924 	anl	a,#0xf0
   091C CF                 1925 	xch	a,r7
   091D C4                 1926 	swap	a
   091E CF                 1927 	xch	a,r7
   091F 6F                 1928 	xrl	a,r7
   0920 CF                 1929 	xch	a,r7
   0921 54 F0              1930 	anl	a,#0xf0
   0923 CF                 1931 	xch	a,r7
   0924 6F                 1932 	xrl	a,r7
   0925 FE                 1933 	mov	r6,a
   0926 EF                 1934 	mov	a,r7
   0927 25*05              1935 	add	a,_serialControl_sloc2_1_0
   0929 F5*08              1936 	mov	_serialControl_sloc3_1_0,a
   092B EE                 1937 	mov	a,r6
   092C 35*06              1938 	addc	a,(_serialControl_sloc2_1_0 + 1)
   092E F5*09              1939 	mov	(_serialControl_sloc3_1_0 + 1),a
   0930 85*07*0A           1940 	mov	(_serialControl_sloc3_1_0 + 2),(_serialControl_sloc2_1_0 + 2)
   0933 74 03              1941 	mov	a,#0x03
   0935 2A                 1942 	add	a,r2
   0936 F9                 1943 	mov	r1,a
   0937 E4                 1944 	clr	a
   0938 3B                 1945 	addc	a,r3
   0939 FE                 1946 	mov	r6,a
   093A 8C 07              1947 	mov	ar7,r4
   093C 89 82              1948 	mov	dpl,r1
   093E 8E 83              1949 	mov	dph,r6
   0940 8F F0              1950 	mov	b,r7
   0942 12s00r00           1951 	lcall	__gptrget
   0945 14                 1952 	dec	a
   0946 25*08              1953 	add	a,_serialControl_sloc3_1_0
   0948 FE                 1954 	mov	r6,a
   0949 E4                 1955 	clr	a
   094A 35*09              1956 	addc	a,(_serialControl_sloc3_1_0 + 1)
   094C FF                 1957 	mov	r7,a
   094D A8*0A              1958 	mov	r0,(_serialControl_sloc3_1_0 + 2)
   094F 8E 82              1959 	mov	dpl,r6
   0951 8F 83              1960 	mov	dph,r7
   0953 88 F0              1961 	mov	b,r0
   0955 12s00r00           1962 	lcall	__gptrget
   0958 FE                 1963 	mov	r6,a
   0959 33                 1964 	rlc	a
   095A 95 E0              1965 	subb	a,acc
   095C FF                 1966 	mov	r7,a
   095D EE                 1967 	mov	a,r6
   095E 24 FF              1968 	add	a,#0xff
   0960 F5*08              1969 	mov	_serialControl_sloc3_1_0,a
   0962 EF                 1970 	mov	a,r7
   0963 34 FF              1971 	addc	a,#0xff
   0965 F5*09              1972 	mov	(_serialControl_sloc3_1_0 + 1),a
   0967 90s00r9B           1973 	mov	dptr,#_serialControl_scmap_1_1
   096A E0                 1974 	movx	a,@dptr
   096B F5*05              1975 	mov	_serialControl_sloc2_1_0,a
   096D A3                 1976 	inc	dptr
   096E E0                 1977 	movx	a,@dptr
   096F F5*06              1978 	mov	(_serialControl_sloc2_1_0 + 1),a
   0971 A3                 1979 	inc	dptr
   0972 E0                 1980 	movx	a,@dptr
   0973 F5*07              1981 	mov	(_serialControl_sloc2_1_0 + 2),a
   0975 AF*08              1982 	mov	r7,_serialControl_sloc3_1_0
   0977 E5*09              1983 	mov	a,(_serialControl_sloc3_1_0 + 1)
   0979 C4                 1984 	swap	a
   097A 03                 1985 	rr	a
   097B 54 F8              1986 	anl	a,#0xf8
   097D CF                 1987 	xch	a,r7
   097E C4                 1988 	swap	a
   097F 03                 1989 	rr	a
   0980 CF                 1990 	xch	a,r7
   0981 6F                 1991 	xrl	a,r7
   0982 CF                 1992 	xch	a,r7
   0983 54 F8              1993 	anl	a,#0xf8
   0985 CF                 1994 	xch	a,r7
   0986 6F                 1995 	xrl	a,r7
   0987 FE                 1996 	mov	r6,a
   0988 EF                 1997 	mov	a,r7
   0989 25*05              1998 	add	a,_serialControl_sloc2_1_0
   098B FF                 1999 	mov	r7,a
   098C EE                 2000 	mov	a,r6
   098D 35*06              2001 	addc	a,(_serialControl_sloc2_1_0 + 1)
   098F FE                 2002 	mov	r6,a
   0990 A8*07              2003 	mov	r0,(_serialControl_sloc2_1_0 + 2)
   0992 8A 82              2004 	mov	dpl,r2
   0994 8B 83              2005 	mov	dph,r3
   0996 8C F0              2006 	mov	b,r4
   0998 12s00r00           2007 	lcall	__gptrget
   099B 14                 2008 	dec	a
   099C 2F                 2009 	add	a,r7
   099D FF                 2010 	mov	r7,a
   099E E4                 2011 	clr	a
   099F 3E                 2012 	addc	a,r6
   09A0 FE                 2013 	mov	r6,a
   09A1 ED                 2014 	mov	a,r5
   09A2 14                 2015 	dec	a
   09A3 90s00r00           2016 	mov	dptr,#_pow_PARM_2
   09A6 D3                 2017 	setb	c
   09A7 94 05              2018 	subb	a,#0x05
   09A9 F4                 2019 	cpl	a
   09AA F0                 2020 	movx	@dptr,a
   09AB 75 82 02           2021 	mov	dpl,#0x02
   09AE C0 06              2022 	push	ar6
   09B0 C0 07              2023 	push	ar7
   09B2 C0 00              2024 	push	ar0
   09B4 12s00r00           2025 	lcall	_pow
   09B7 A9 82              2026 	mov	r1,dpl
   09B9 D0 00              2027 	pop	ar0
   09BB D0 07              2028 	pop	ar7
   09BD D0 06              2029 	pop	ar6
   09BF 8F 82              2030 	mov	dpl,r7
   09C1 8E 83              2031 	mov	dph,r6
   09C3 88 F0              2032 	mov	b,r0
   09C5 12s00r00           2033 	lcall	__gptrget
   09C8 FF                 2034 	mov	r7,a
   09C9 90s00r9E           2035 	mov	dptr,#_serialControl_logic_op_1_1
   09CC E9                 2036 	mov	a,r1
   09CD 5F                 2037 	anl	a,r7
   09CE F0                 2038 	movx	@dptr,a
   09CF 02s0ArDD           2039 	ljmp	00154$
   09D2                    2040 00153$:
                           2041 ;	SERIAL.c:146: else if(player->scol==1 && player->col >1)
   09D2 E4                 2042 	clr	a
   09D3 BD 01 01           2043 	cjne	r5,#0x01,00258$
   09D6 04                 2044 	inc	a
   09D7                    2045 00258$:
   09D7 FD                 2046 	mov	r5,a
   09D8 70 03              2047 	jnz	00260$
   09DA 02s0ArC2           2048 	ljmp	00149$
   09DD                    2049 00260$:
   09DD 74 03              2050 	mov	a,#0x03
   09DF 2A                 2051 	add	a,r2
   09E0 FE                 2052 	mov	r6,a
   09E1 E4                 2053 	clr	a
   09E2 3B                 2054 	addc	a,r3
   09E3 FF                 2055 	mov	r7,a
   09E4 8C 00              2056 	mov	ar0,r4
   09E6 8E 82              2057 	mov	dpl,r6
   09E8 8F 83              2058 	mov	dph,r7
   09EA 88 F0              2059 	mov	b,r0
   09EC 12s00r00           2060 	lcall	__gptrget
   09EF FE                 2061 	mov  r6,a
   09F0 24 FE              2062 	add	a,#0xff - 0x01
   09F2 40 03              2063 	jc	00261$
   09F4 02s0ArC2           2064 	ljmp	00149$
   09F7                    2065 00261$:
                           2066 ;	SERIAL.c:147: logic_op = scmap[(map[player->line-1][player->col-2].schar) - 1].adds[player->sline-1] & (pow(2,5-(5)));
   09F7 74 02              2067 	mov	a,#0x02
   09F9 2A                 2068 	add	a,r2
   09FA FF                 2069 	mov	r7,a
   09FB E4                 2070 	clr	a
   09FC 3B                 2071 	addc	a,r3
   09FD F8                 2072 	mov	r0,a
   09FE 8C 01              2073 	mov	ar1,r4
   0A00 8F 82              2074 	mov	dpl,r7
   0A02 88 83              2075 	mov	dph,r0
   0A04 89 F0              2076 	mov	b,r1
   0A06 12s00r00           2077 	lcall	__gptrget
   0A09 78 00              2078 	mov	r0,#0x00
   0A0B 24 FF              2079 	add	a,#0xff
   0A0D F5*08              2080 	mov	_serialControl_sloc3_1_0,a
   0A0F E8                 2081 	mov	a,r0
   0A10 34 FF              2082 	addc	a,#0xff
   0A12 F5*09              2083 	mov	(_serialControl_sloc3_1_0 + 1),a
   0A14 90s00r98           2084 	mov	dptr,#_serialControl_PARM_2
   0A17 E0                 2085 	movx	a,@dptr
   0A18 F5*05              2086 	mov	_serialControl_sloc2_1_0,a
   0A1A A3                 2087 	inc	dptr
   0A1B E0                 2088 	movx	a,@dptr
   0A1C F5*06              2089 	mov	(_serialControl_sloc2_1_0 + 1),a
   0A1E A3                 2090 	inc	dptr
   0A1F E0                 2091 	movx	a,@dptr
   0A20 F5*07              2092 	mov	(_serialControl_sloc2_1_0 + 2),a
   0A22 AF*08              2093 	mov	r7,_serialControl_sloc3_1_0
   0A24 E5*09              2094 	mov	a,(_serialControl_sloc3_1_0 + 1)
   0A26 C4                 2095 	swap	a
   0A27 54 F0              2096 	anl	a,#0xf0
   0A29 CF                 2097 	xch	a,r7
   0A2A C4                 2098 	swap	a
   0A2B CF                 2099 	xch	a,r7
   0A2C 6F                 2100 	xrl	a,r7
   0A2D CF                 2101 	xch	a,r7
   0A2E 54 F0              2102 	anl	a,#0xf0
   0A30 CF                 2103 	xch	a,r7
   0A31 6F                 2104 	xrl	a,r7
   0A32 F8                 2105 	mov	r0,a
   0A33 EF                 2106 	mov	a,r7
   0A34 25*05              2107 	add	a,_serialControl_sloc2_1_0
   0A36 FF                 2108 	mov	r7,a
   0A37 E8                 2109 	mov	a,r0
   0A38 35*06              2110 	addc	a,(_serialControl_sloc2_1_0 + 1)
   0A3A F8                 2111 	mov	r0,a
   0A3B A9*07              2112 	mov	r1,(_serialControl_sloc2_1_0 + 2)
   0A3D EE                 2113 	mov	a,r6
   0A3E 24 FE              2114 	add	a,#0xfe
   0A40 2F                 2115 	add	a,r7
   0A41 FF                 2116 	mov	r7,a
   0A42 E4                 2117 	clr	a
   0A43 38                 2118 	addc	a,r0
   0A44 F8                 2119 	mov	r0,a
   0A45 8F 82              2120 	mov	dpl,r7
   0A47 88 83              2121 	mov	dph,r0
   0A49 89 F0              2122 	mov	b,r1
   0A4B 12s00r00           2123 	lcall	__gptrget
   0A4E FF                 2124 	mov	r7,a
   0A4F 33                 2125 	rlc	a
   0A50 95 E0              2126 	subb	a,acc
   0A52 FE                 2127 	mov	r6,a
   0A53 EF                 2128 	mov	a,r7
   0A54 24 FF              2129 	add	a,#0xff
   0A56 F5*08              2130 	mov	_serialControl_sloc3_1_0,a
   0A58 EE                 2131 	mov	a,r6
   0A59 34 FF              2132 	addc	a,#0xff
   0A5B F5*09              2133 	mov	(_serialControl_sloc3_1_0 + 1),a
   0A5D 90s00r9B           2134 	mov	dptr,#_serialControl_scmap_1_1
   0A60 E0                 2135 	movx	a,@dptr
   0A61 F5*05              2136 	mov	_serialControl_sloc2_1_0,a
   0A63 A3                 2137 	inc	dptr
   0A64 E0                 2138 	movx	a,@dptr
   0A65 F5*06              2139 	mov	(_serialControl_sloc2_1_0 + 1),a
   0A67 A3                 2140 	inc	dptr
   0A68 E0                 2141 	movx	a,@dptr
   0A69 F5*07              2142 	mov	(_serialControl_sloc2_1_0 + 2),a
   0A6B AF*08              2143 	mov	r7,_serialControl_sloc3_1_0
   0A6D E5*09              2144 	mov	a,(_serialControl_sloc3_1_0 + 1)
   0A6F C4                 2145 	swap	a
   0A70 03                 2146 	rr	a
   0A71 54 F8              2147 	anl	a,#0xf8
   0A73 CF                 2148 	xch	a,r7
   0A74 C4                 2149 	swap	a
   0A75 03                 2150 	rr	a
   0A76 CF                 2151 	xch	a,r7
   0A77 6F                 2152 	xrl	a,r7
   0A78 CF                 2153 	xch	a,r7
   0A79 54 F8              2154 	anl	a,#0xf8
   0A7B CF                 2155 	xch	a,r7
   0A7C 6F                 2156 	xrl	a,r7
   0A7D FE                 2157 	mov	r6,a
   0A7E EF                 2158 	mov	a,r7
   0A7F 25*05              2159 	add	a,_serialControl_sloc2_1_0
   0A81 FF                 2160 	mov	r7,a
   0A82 EE                 2161 	mov	a,r6
   0A83 35*06              2162 	addc	a,(_serialControl_sloc2_1_0 + 1)
   0A85 FE                 2163 	mov	r6,a
   0A86 A8*07              2164 	mov	r0,(_serialControl_sloc2_1_0 + 2)
   0A88 8A 82              2165 	mov	dpl,r2
   0A8A 8B 83              2166 	mov	dph,r3
   0A8C 8C F0              2167 	mov	b,r4
   0A8E 12s00r00           2168 	lcall	__gptrget
   0A91 14                 2169 	dec	a
   0A92 2F                 2170 	add	a,r7
   0A93 FF                 2171 	mov	r7,a
   0A94 E4                 2172 	clr	a
   0A95 3E                 2173 	addc	a,r6
   0A96 FE                 2174 	mov	r6,a
   0A97 90s00r00           2175 	mov	dptr,#_pow_PARM_2
   0A9A E4                 2176 	clr	a
   0A9B F0                 2177 	movx	@dptr,a
   0A9C 75 82 02           2178 	mov	dpl,#0x02
   0A9F C0 06              2179 	push	ar6
   0AA1 C0 07              2180 	push	ar7
   0AA3 C0 00              2181 	push	ar0
   0AA5 12s00r00           2182 	lcall	_pow
   0AA8 A9 82              2183 	mov	r1,dpl
   0AAA D0 00              2184 	pop	ar0
   0AAC D0 07              2185 	pop	ar7
   0AAE D0 06              2186 	pop	ar6
   0AB0 8F 82              2187 	mov	dpl,r7
   0AB2 8E 83              2188 	mov	dph,r6
   0AB4 88 F0              2189 	mov	b,r0
   0AB6 12s00r00           2190 	lcall	__gptrget
   0AB9 FF                 2191 	mov	r7,a
   0ABA 90s00r9E           2192 	mov	dptr,#_serialControl_logic_op_1_1
   0ABD E9                 2193 	mov	a,r1
   0ABE 5F                 2194 	anl	a,r7
   0ABF F0                 2195 	movx	@dptr,a
   0AC0 80 1B              2196 	sjmp	00154$
   0AC2                    2197 00149$:
                           2198 ;	SERIAL.c:148: else if(player->scol==1 && player->col == 1)
   0AC2 ED                 2199 	mov	a,r5
   0AC3 60 18              2200 	jz	00154$
   0AC5 74 03              2201 	mov	a,#0x03
   0AC7 2A                 2202 	add	a,r2
   0AC8 FA                 2203 	mov	r2,a
   0AC9 E4                 2204 	clr	a
   0ACA 3B                 2205 	addc	a,r3
   0ACB FB                 2206 	mov	r3,a
   0ACC 8A 82              2207 	mov	dpl,r2
   0ACE 8B 83              2208 	mov	dph,r3
   0AD0 8C F0              2209 	mov	b,r4
   0AD2 12s00r00           2210 	lcall	__gptrget
   0AD5 FA                 2211 	mov	r2,a
   0AD6 BA 01 04           2212 	cjne	r2,#0x01,00154$
                           2213 ;	SERIAL.c:149: return 0;
   0AD9 75 82 00           2214 	mov	dpl,#0x00
   0ADC 22                 2215 	ret
   0ADD                    2216 00154$:
                           2217 ;	SERIAL.c:152: if(logic_op == 0){
   0ADD 90s00r9E           2218 	mov	dptr,#_serialControl_logic_op_1_1
   0AE0 E0                 2219 	movx	a,@dptr
   0AE1 FA                 2220 	mov	r2,a
   0AE2 70 5C              2221 	jnz	00175$
                           2222 ;	SERIAL.c:153: if(player->scol != 1)
   0AE4 90s00r8F           2223 	mov	dptr,#_player
   0AE7 E0                 2224 	movx	a,@dptr
   0AE8 FA                 2225 	mov	r2,a
   0AE9 A3                 2226 	inc	dptr
   0AEA E0                 2227 	movx	a,@dptr
   0AEB FB                 2228 	mov	r3,a
   0AEC A3                 2229 	inc	dptr
   0AED E0                 2230 	movx	a,@dptr
   0AEE FC                 2231 	mov	r4,a
   0AEF 74 01              2232 	mov	a,#0x01
   0AF1 2A                 2233 	add	a,r2
   0AF2 FD                 2234 	mov	r5,a
   0AF3 E4                 2235 	clr	a
   0AF4 3B                 2236 	addc	a,r3
   0AF5 FE                 2237 	mov	r6,a
   0AF6 8C 07              2238 	mov	ar7,r4
   0AF8 8D 82              2239 	mov	dpl,r5
   0AFA 8E 83              2240 	mov	dph,r6
   0AFC 8F F0              2241 	mov	b,r7
   0AFE 12s00r00           2242 	lcall	__gptrget
   0B01 F8                 2243 	mov	r0,a
   0B02 B8 01 02           2244 	cjne	r0,#0x01,00266$
   0B05 80 0D              2245 	sjmp	00158$
   0B07                    2246 00266$:
                           2247 ;	SERIAL.c:154: player->scol--;
   0B07 18                 2248 	dec	r0
   0B08 8D 82              2249 	mov	dpl,r5
   0B0A 8E 83              2250 	mov	dph,r6
   0B0C 8F F0              2251 	mov	b,r7
   0B0E E8                 2252 	mov	a,r0
   0B0F 12s00r00           2253 	lcall	__gptrput
   0B12 80 2C              2254 	sjmp	00175$
   0B14                    2255 00158$:
                           2256 ;	SERIAL.c:156: if(player->col != 1){
   0B14 74 03              2257 	mov	a,#0x03
   0B16 2A                 2258 	add	a,r2
   0B17 FA                 2259 	mov	r2,a
   0B18 E4                 2260 	clr	a
   0B19 3B                 2261 	addc	a,r3
   0B1A FB                 2262 	mov	r3,a
   0B1B 8A 82              2263 	mov	dpl,r2
   0B1D 8B 83              2264 	mov	dph,r3
   0B1F 8C F0              2265 	mov	b,r4
   0B21 12s00r00           2266 	lcall	__gptrget
   0B24 F8                 2267 	mov	r0,a
   0B25 B8 01 02           2268 	cjne	r0,#0x01,00267$
   0B28 80 16              2269 	sjmp	00175$
   0B2A                    2270 00267$:
                           2271 ;	SERIAL.c:157: player->scol = 5;
   0B2A 8D 82              2272 	mov	dpl,r5
   0B2C 8E 83              2273 	mov	dph,r6
   0B2E 8F F0              2274 	mov	b,r7
   0B30 74 05              2275 	mov	a,#0x05
   0B32 12s00r00           2276 	lcall	__gptrput
                           2277 ;	SERIAL.c:158: player->col--;
   0B35 18                 2278 	dec	r0
   0B36 8A 82              2279 	mov	dpl,r2
   0B38 8B 83              2280 	mov	dph,r3
   0B3A 8C F0              2281 	mov	b,r4
   0B3C E8                 2282 	mov	a,r0
   0B3D 12s00r00           2283 	lcall	__gptrput
   0B40                    2284 00175$:
                           2285 ;	SERIAL.c:169: printMap();
   0B40 12s00r00           2286 	lcall	_printMap
                           2287 ;	SERIAL.c:170: RI = 0;
   0B43 C2 98              2288 	clr	_RI
   0B45                    2289 00178$:
                           2290 ;	SERIAL.c:173: return 1;
   0B45 75 82 01           2291 	mov	dpl,#0x01
   0B48 22                 2292 	ret
                           2293 	.area CSEG    (CODE)
                           2294 	.area CONST   (CODE)
                           2295 	.area XINIT   (CODE)
   0000                    2296 __xinit__rxMsg:
   0000 00                 2297 	.db #0x00
                           2298 	.area CABS    (ABS,CODE)
